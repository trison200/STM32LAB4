
LAB4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080029e8  080029e8  000129e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a18  08002a18  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a18  08002a18  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a18  08002a18  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a18  08002a18  00012a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a1c  08002a1c  00012a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08002a20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  2000002c  08002a4c  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08002a4c  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a9c  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c0c  00000000  00000000  00029af1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  0002b700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000950  00000000  00000000  0002c160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f7d  00000000  00000000  0002cab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c89d  00000000  00000000  00043a2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082494  00000000  00000000  000502ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d275e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028e0  00000000  00000000  000d27b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000002c 	.word	0x2000002c
 8000128:	00000000 	.word	0x00000000
 800012c:	080029d0 	.word	0x080029d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000030 	.word	0x20000030
 8000148:	080029d0 	.word	0x080029d0

0800014c <initButton>:
int button_flag[NO_OF_BUTTONS];
int TimerForKeyPressed[NO_OF_BUTTONS];


void initButton()
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for (int i = 0; i < NO_OF_BUTTONS; i++)
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e020      	b.n	800019a <initButton+0x4e>
	{
		buttonDebounce0[i] = NORMAL_STATE;
 8000158:	4a14      	ldr	r2, [pc, #80]	; (80001ac <initButton+0x60>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2101      	movs	r1, #1
 800015e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		buttonDebounce1[i] = NORMAL_STATE;
 8000162:	4a13      	ldr	r2, [pc, #76]	; (80001b0 <initButton+0x64>)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2101      	movs	r1, #1
 8000168:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		buttonDebounce2[i] = NORMAL_STATE;
 800016c:	4a11      	ldr	r2, [pc, #68]	; (80001b4 <initButton+0x68>)
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	2101      	movs	r1, #1
 8000172:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		buttonDebounce3[i] = NORMAL_STATE;
 8000176:	4a10      	ldr	r2, [pc, #64]	; (80001b8 <initButton+0x6c>)
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2101      	movs	r1, #1
 800017c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		button_flag[i] = 0;
 8000180:	4a0e      	ldr	r2, [pc, #56]	; (80001bc <initButton+0x70>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2100      	movs	r1, #0
 8000186:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		TimerForKeyPressed[i] = 200;
 800018a:	4a0d      	ldr	r2, [pc, #52]	; (80001c0 <initButton+0x74>)
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	21c8      	movs	r1, #200	; 0xc8
 8000190:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NO_OF_BUTTONS; i++)
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	3301      	adds	r3, #1
 8000198:	607b      	str	r3, [r7, #4]
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2b02      	cmp	r3, #2
 800019e:	dddb      	ble.n	8000158 <initButton+0xc>
	}
}
 80001a0:	bf00      	nop
 80001a2:	bf00      	nop
 80001a4:	370c      	adds	r7, #12
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	200000a0 	.word	0x200000a0
 80001b0:	200000ac 	.word	0x200000ac
 80001b4:	20000094 	.word	0x20000094
 80001b8:	20000070 	.word	0x20000070
 80001bc:	20000088 	.word	0x20000088
 80001c0:	2000007c 	.word	0x2000007c

080001c4 <isButtonPressed>:


int isButtonPressed(int index)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1)
 80001cc:	4a09      	ldr	r2, [pc, #36]	; (80001f4 <isButtonPressed+0x30>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001d4:	2b01      	cmp	r3, #1
 80001d6:	d106      	bne.n	80001e6 <isButtonPressed+0x22>
	{
		button_flag[index] = 0;
 80001d8:	4a06      	ldr	r2, [pc, #24]	; (80001f4 <isButtonPressed+0x30>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	2100      	movs	r1, #0
 80001de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80001e2:	2301      	movs	r3, #1
 80001e4:	e000      	b.n	80001e8 <isButtonPressed+0x24>
	}
	return 0;
 80001e6:	2300      	movs	r3, #0
}
 80001e8:	4618      	mov	r0, r3
 80001ea:	370c      	adds	r7, #12
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bc80      	pop	{r7}
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	20000088 	.word	0x20000088

080001f8 <subKeyProcess>:

void subKeyProcess(int index)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000200:	4a04      	ldr	r2, [pc, #16]	; (8000214 <subKeyProcess+0x1c>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	2101      	movs	r1, #1
 8000206:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800020a:	bf00      	nop
 800020c:	370c      	adds	r7, #12
 800020e:	46bd      	mov	sp, r7
 8000210:	bc80      	pop	{r7}
 8000212:	4770      	bx	lr
 8000214:	20000088 	.word	0x20000088

08000218 <getKeyInput>:

void getKeyInput()
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NO_OF_BUTTONS; i++)
 800021e:	2300      	movs	r3, #0
 8000220:	607b      	str	r3, [r7, #4]
 8000222:	e07d      	b.n	8000320 <getKeyInput+0x108>
	{
		buttonDebounce0[i] = buttonDebounce1[i];
 8000224:	4a43      	ldr	r2, [pc, #268]	; (8000334 <getKeyInput+0x11c>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022c:	4942      	ldr	r1, [pc, #264]	; (8000338 <getKeyInput+0x120>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		buttonDebounce1[i] = buttonDebounce2[i];
 8000234:	4a41      	ldr	r2, [pc, #260]	; (800033c <getKeyInput+0x124>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800023c:	493d      	ldr	r1, [pc, #244]	; (8000334 <getKeyInput+0x11c>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		switch(i)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2b02      	cmp	r3, #2
 8000248:	d020      	beq.n	800028c <getKeyInput+0x74>
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	2b02      	cmp	r3, #2
 800024e:	dc29      	bgt.n	80002a4 <getKeyInput+0x8c>
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d003      	beq.n	800025e <getKeyInput+0x46>
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	2b01      	cmp	r3, #1
 800025a:	d00b      	beq.n	8000274 <getKeyInput+0x5c>
				break;
			case 2:
				buttonDebounce2[i] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
				break;
			default:
				break;
 800025c:	e022      	b.n	80002a4 <getKeyInput+0x8c>
				buttonDebounce2[i] = HAL_GPIO_ReadPin(BUTTON0_GPIO_Port, BUTTON0_Pin);
 800025e:	2180      	movs	r1, #128	; 0x80
 8000260:	4837      	ldr	r0, [pc, #220]	; (8000340 <getKeyInput+0x128>)
 8000262:	f001 fb89 	bl	8001978 <HAL_GPIO_ReadPin>
 8000266:	4603      	mov	r3, r0
 8000268:	4619      	mov	r1, r3
 800026a:	4a34      	ldr	r2, [pc, #208]	; (800033c <getKeyInput+0x124>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000272:	e018      	b.n	80002a6 <getKeyInput+0x8e>
				buttonDebounce2[i] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8000274:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000278:	4831      	ldr	r0, [pc, #196]	; (8000340 <getKeyInput+0x128>)
 800027a:	f001 fb7d 	bl	8001978 <HAL_GPIO_ReadPin>
 800027e:	4603      	mov	r3, r0
 8000280:	4619      	mov	r1, r3
 8000282:	4a2e      	ldr	r2, [pc, #184]	; (800033c <getKeyInput+0x124>)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 800028a:	e00c      	b.n	80002a6 <getKeyInput+0x8e>
				buttonDebounce2[i] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 800028c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000290:	482b      	ldr	r0, [pc, #172]	; (8000340 <getKeyInput+0x128>)
 8000292:	f001 fb71 	bl	8001978 <HAL_GPIO_ReadPin>
 8000296:	4603      	mov	r3, r0
 8000298:	4619      	mov	r1, r3
 800029a:	4a28      	ldr	r2, [pc, #160]	; (800033c <getKeyInput+0x124>)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 80002a2:	e000      	b.n	80002a6 <getKeyInput+0x8e>
				break;
 80002a4:	bf00      	nop
		}
		if (buttonDebounce0[i] == buttonDebounce1[i] && buttonDebounce1[i] == buttonDebounce2[i])
 80002a6:	4a24      	ldr	r2, [pc, #144]	; (8000338 <getKeyInput+0x120>)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ae:	4921      	ldr	r1, [pc, #132]	; (8000334 <getKeyInput+0x11c>)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d12f      	bne.n	800031a <getKeyInput+0x102>
 80002ba:	4a1e      	ldr	r2, [pc, #120]	; (8000334 <getKeyInput+0x11c>)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002c2:	491e      	ldr	r1, [pc, #120]	; (800033c <getKeyInput+0x124>)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002ca:	429a      	cmp	r2, r3
 80002cc:	d125      	bne.n	800031a <getKeyInput+0x102>
		{
			if (buttonDebounce3[i] != buttonDebounce2[i])
 80002ce:	4a1d      	ldr	r2, [pc, #116]	; (8000344 <getKeyInput+0x12c>)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002d6:	4919      	ldr	r1, [pc, #100]	; (800033c <getKeyInput+0x124>)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002de:	429a      	cmp	r2, r3
 80002e0:	d01b      	beq.n	800031a <getKeyInput+0x102>
			{
				buttonDebounce3[i] = buttonDebounce2[i];
 80002e2:	4a16      	ldr	r2, [pc, #88]	; (800033c <getKeyInput+0x124>)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ea:	4916      	ldr	r1, [pc, #88]	; (8000344 <getKeyInput+0x12c>)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (buttonDebounce2[i] == PRESSED_STATE)
 80002f2:	4a12      	ldr	r2, [pc, #72]	; (800033c <getKeyInput+0x124>)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d108      	bne.n	8000310 <getKeyInput+0xf8>
				{
					//TODO
					subKeyProcess(i);
 80002fe:	6878      	ldr	r0, [r7, #4]
 8000300:	f7ff ff7a 	bl	80001f8 <subKeyProcess>
					TimerForKeyPressed[i] = 200;
 8000304:	4a10      	ldr	r2, [pc, #64]	; (8000348 <getKeyInput+0x130>)
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	21c8      	movs	r1, #200	; 0xc8
 800030a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800030e:	e004      	b.n	800031a <getKeyInput+0x102>
				}
				else
				{
					buttonDebounce3[i] = NORMAL_STATE;
 8000310:	4a0c      	ldr	r2, [pc, #48]	; (8000344 <getKeyInput+0x12c>)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2101      	movs	r1, #1
 8000316:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NO_OF_BUTTONS; i++)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	3301      	adds	r3, #1
 800031e:	607b      	str	r3, [r7, #4]
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	2b02      	cmp	r3, #2
 8000324:	f77f af7e 	ble.w	8000224 <getKeyInput+0xc>
				}
			}
		}

	}
}
 8000328:	bf00      	nop
 800032a:	bf00      	nop
 800032c:	3708      	adds	r7, #8
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	200000ac 	.word	0x200000ac
 8000338:	200000a0 	.word	0x200000a0
 800033c:	20000094 	.word	0x20000094
 8000340:	40010800 	.word	0x40010800
 8000344:	20000070 	.word	0x20000070
 8000348:	2000007c 	.word	0x2000007c

0800034c <display7SEG>:
const uint8_t Led7Seg[] = { 0b11000000, 0b11111001, 0b10100100, 0b10110000, 0b10011001, 0b10010010,
		0b10000010, 0b11111000, 0b10000000, 0b10010000  };
const int MAX_LED = 4;
  int index_led = 0;

void display7SEG(int num){
 800034c:	b580      	push	{r7, lr}
 800034e:	b084      	sub	sp, #16
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
	uint8_t led_id = Led7Seg[num];
 8000354:	4a29      	ldr	r2, [pc, #164]	; (80003fc <display7SEG+0xb0>)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4413      	add	r3, r2
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, (led_id & 0x01) );
 800035e:	7bfb      	ldrb	r3, [r7, #15]
 8000360:	f003 0301 	and.w	r3, r3, #1
 8000364:	b2db      	uxtb	r3, r3
 8000366:	461a      	mov	r2, r3
 8000368:	2101      	movs	r1, #1
 800036a:	4825      	ldr	r0, [pc, #148]	; (8000400 <display7SEG+0xb4>)
 800036c:	f001 fb1b 	bl	80019a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, ((led_id>>1) & 0x01) );
 8000370:	7bfb      	ldrb	r3, [r7, #15]
 8000372:	085b      	lsrs	r3, r3, #1
 8000374:	b2db      	uxtb	r3, r3
 8000376:	f003 0301 	and.w	r3, r3, #1
 800037a:	b2db      	uxtb	r3, r3
 800037c:	461a      	mov	r2, r3
 800037e:	2102      	movs	r1, #2
 8000380:	481f      	ldr	r0, [pc, #124]	; (8000400 <display7SEG+0xb4>)
 8000382:	f001 fb10 	bl	80019a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, ((led_id>>2) & 0x01) );
 8000386:	7bfb      	ldrb	r3, [r7, #15]
 8000388:	089b      	lsrs	r3, r3, #2
 800038a:	b2db      	uxtb	r3, r3
 800038c:	f003 0301 	and.w	r3, r3, #1
 8000390:	b2db      	uxtb	r3, r3
 8000392:	461a      	mov	r2, r3
 8000394:	2104      	movs	r1, #4
 8000396:	481a      	ldr	r0, [pc, #104]	; (8000400 <display7SEG+0xb4>)
 8000398:	f001 fb05 	bl	80019a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, ((led_id>>3) & 0x01) );
 800039c:	7bfb      	ldrb	r3, [r7, #15]
 800039e:	08db      	lsrs	r3, r3, #3
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	f003 0301 	and.w	r3, r3, #1
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	461a      	mov	r2, r3
 80003aa:	2108      	movs	r1, #8
 80003ac:	4814      	ldr	r0, [pc, #80]	; (8000400 <display7SEG+0xb4>)
 80003ae:	f001 fafa 	bl	80019a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, ((led_id>>4) & 0x01) );
 80003b2:	7bfb      	ldrb	r3, [r7, #15]
 80003b4:	091b      	lsrs	r3, r3, #4
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	f003 0301 	and.w	r3, r3, #1
 80003bc:	b2db      	uxtb	r3, r3
 80003be:	461a      	mov	r2, r3
 80003c0:	2110      	movs	r1, #16
 80003c2:	480f      	ldr	r0, [pc, #60]	; (8000400 <display7SEG+0xb4>)
 80003c4:	f001 faef 	bl	80019a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, ((led_id>>5) & 0x01) );
 80003c8:	7bfb      	ldrb	r3, [r7, #15]
 80003ca:	095b      	lsrs	r3, r3, #5
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	f003 0301 	and.w	r3, r3, #1
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	461a      	mov	r2, r3
 80003d6:	2120      	movs	r1, #32
 80003d8:	4809      	ldr	r0, [pc, #36]	; (8000400 <display7SEG+0xb4>)
 80003da:	f001 fae4 	bl	80019a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, ((led_id>>6) & 0x01) );
 80003de:	7bfb      	ldrb	r3, [r7, #15]
 80003e0:	099b      	lsrs	r3, r3, #6
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	f003 0301 	and.w	r3, r3, #1
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	461a      	mov	r2, r3
 80003ec:	2140      	movs	r1, #64	; 0x40
 80003ee:	4804      	ldr	r0, [pc, #16]	; (8000400 <display7SEG+0xb4>)
 80003f0:	f001 fad9 	bl	80019a6 <HAL_GPIO_WritePin>
}
 80003f4:	bf00      	nop
 80003f6:	3710      	adds	r7, #16
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	080029e8 	.word	0x080029e8
 8000400:	40010c00 	.word	0x40010c00

08000404 <clearAll>:

void clearAll(){
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN1_Pin |EN2_Pin | EN3_Pin, SET);
 8000408:	2201      	movs	r2, #1
 800040a:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 800040e:	4805      	ldr	r0, [pc, #20]	; (8000424 <clearAll+0x20>)
 8000410:	f001 fac9 	bl	80019a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, a_Pin | b_Pin | c_Pin | d_Pin | e_Pin | f_Pin | g_Pin, SET);
 8000414:	2201      	movs	r2, #1
 8000416:	217f      	movs	r1, #127	; 0x7f
 8000418:	4803      	ldr	r0, [pc, #12]	; (8000428 <clearAll+0x24>)
 800041a:	f001 fac4 	bl	80019a6 <HAL_GPIO_WritePin>
}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	40010800 	.word	0x40010800
 8000428:	40010c00 	.word	0x40010c00

0800042c <en_Pin>:

int en_pin[4]={ EN0_Pin, EN1_Pin,EN2_Pin,EN3_Pin};

void en_Pin(int number){
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, en_pin[number] , RESET);
 8000434:	4a06      	ldr	r2, [pc, #24]	; (8000450 <en_Pin+0x24>)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800043c:	b29b      	uxth	r3, r3
 800043e:	2200      	movs	r2, #0
 8000440:	4619      	mov	r1, r3
 8000442:	4804      	ldr	r0, [pc, #16]	; (8000454 <en_Pin+0x28>)
 8000444:	f001 faaf 	bl	80019a6 <HAL_GPIO_WritePin>
}
 8000448:	bf00      	nop
 800044a:	3708      	adds	r7, #8
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	20000000 	.word	0x20000000
 8000454:	40010800 	.word	0x40010800

08000458 <update7SEG>:
int led_buffer [4] = {0 , 0 , 0 , 0};
void update7SEG(int index){
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
	clearAll();
 8000460:	f7ff ffd0 	bl	8000404 <clearAll>
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	2b03      	cmp	r3, #3
 8000468:	d82e      	bhi.n	80004c8 <update7SEG+0x70>
 800046a:	a201      	add	r2, pc, #4	; (adr r2, 8000470 <update7SEG+0x18>)
 800046c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000470:	08000481 	.word	0x08000481
 8000474:	08000493 	.word	0x08000493
 8000478:	080004a5 	.word	0x080004a5
 800047c:	080004b7 	.word	0x080004b7
	switch (index){
	case 0:{
		display7SEG(led_buffer[0]);
 8000480:	4b14      	ldr	r3, [pc, #80]	; (80004d4 <update7SEG+0x7c>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff ff61 	bl	800034c <display7SEG>
		en_Pin(0);
 800048a:	2000      	movs	r0, #0
 800048c:	f7ff ffce 	bl	800042c <en_Pin>
		break;
 8000490:	e01b      	b.n	80004ca <update7SEG+0x72>
	}
	case 1:{
			display7SEG(led_buffer[1]);
 8000492:	4b10      	ldr	r3, [pc, #64]	; (80004d4 <update7SEG+0x7c>)
 8000494:	685b      	ldr	r3, [r3, #4]
 8000496:	4618      	mov	r0, r3
 8000498:	f7ff ff58 	bl	800034c <display7SEG>
			en_Pin(1);
 800049c:	2001      	movs	r0, #1
 800049e:	f7ff ffc5 	bl	800042c <en_Pin>
			break;
 80004a2:	e012      	b.n	80004ca <update7SEG+0x72>
		}
	case 2:{
			display7SEG(led_buffer[2]);
 80004a4:	4b0b      	ldr	r3, [pc, #44]	; (80004d4 <update7SEG+0x7c>)
 80004a6:	689b      	ldr	r3, [r3, #8]
 80004a8:	4618      	mov	r0, r3
 80004aa:	f7ff ff4f 	bl	800034c <display7SEG>
			en_Pin(2);
 80004ae:	2002      	movs	r0, #2
 80004b0:	f7ff ffbc 	bl	800042c <en_Pin>
			break;
 80004b4:	e009      	b.n	80004ca <update7SEG+0x72>
		}
	case 3:{
			display7SEG(led_buffer[3]);
 80004b6:	4b07      	ldr	r3, [pc, #28]	; (80004d4 <update7SEG+0x7c>)
 80004b8:	68db      	ldr	r3, [r3, #12]
 80004ba:	4618      	mov	r0, r3
 80004bc:	f7ff ff46 	bl	800034c <display7SEG>
			en_Pin(3);
 80004c0:	2003      	movs	r0, #3
 80004c2:	f7ff ffb3 	bl	800042c <en_Pin>
			break;
 80004c6:	e000      	b.n	80004ca <update7SEG+0x72>
		}
	default:
		break;
 80004c8:	bf00      	nop
	}
}
 80004ca:	bf00      	nop
 80004cc:	3708      	adds	r7, #8
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	20000048 	.word	0x20000048

080004d8 <updateLedBuffer>:

void updateLedBuffer(int num1, int num2){
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	6039      	str	r1, [r7, #0]
		led_buffer[0] = num1/10;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4a18      	ldr	r2, [pc, #96]	; (8000548 <updateLedBuffer+0x70>)
 80004e6:	fb82 1203 	smull	r1, r2, r2, r3
 80004ea:	1092      	asrs	r2, r2, #2
 80004ec:	17db      	asrs	r3, r3, #31
 80004ee:	1ad3      	subs	r3, r2, r3
 80004f0:	4a16      	ldr	r2, [pc, #88]	; (800054c <updateLedBuffer+0x74>)
 80004f2:	6013      	str	r3, [r2, #0]
		led_buffer[1] = num1%10;
 80004f4:	6879      	ldr	r1, [r7, #4]
 80004f6:	4b14      	ldr	r3, [pc, #80]	; (8000548 <updateLedBuffer+0x70>)
 80004f8:	fb83 2301 	smull	r2, r3, r3, r1
 80004fc:	109a      	asrs	r2, r3, #2
 80004fe:	17cb      	asrs	r3, r1, #31
 8000500:	1ad2      	subs	r2, r2, r3
 8000502:	4613      	mov	r3, r2
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	4413      	add	r3, r2
 8000508:	005b      	lsls	r3, r3, #1
 800050a:	1aca      	subs	r2, r1, r3
 800050c:	4b0f      	ldr	r3, [pc, #60]	; (800054c <updateLedBuffer+0x74>)
 800050e:	605a      	str	r2, [r3, #4]
		led_buffer[2] = num2/10;
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	4a0d      	ldr	r2, [pc, #52]	; (8000548 <updateLedBuffer+0x70>)
 8000514:	fb82 1203 	smull	r1, r2, r2, r3
 8000518:	1092      	asrs	r2, r2, #2
 800051a:	17db      	asrs	r3, r3, #31
 800051c:	1ad3      	subs	r3, r2, r3
 800051e:	4a0b      	ldr	r2, [pc, #44]	; (800054c <updateLedBuffer+0x74>)
 8000520:	6093      	str	r3, [r2, #8]
		led_buffer[3] = num2%10;
 8000522:	6839      	ldr	r1, [r7, #0]
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <updateLedBuffer+0x70>)
 8000526:	fb83 2301 	smull	r2, r3, r3, r1
 800052a:	109a      	asrs	r2, r3, #2
 800052c:	17cb      	asrs	r3, r1, #31
 800052e:	1ad2      	subs	r2, r2, r3
 8000530:	4613      	mov	r3, r2
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	4413      	add	r3, r2
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	1aca      	subs	r2, r1, r3
 800053a:	4b04      	ldr	r3, [pc, #16]	; (800054c <updateLedBuffer+0x74>)
 800053c:	60da      	str	r2, [r3, #12]
}
 800053e:	bf00      	nop
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr
 8000548:	66666667 	.word	0x66666667
 800054c:	20000048 	.word	0x20000048

08000550 <turnOn>:

void turnOn(enum LED led)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	71fb      	strb	r3, [r7, #7]
    switch (led)
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	2b05      	cmp	r3, #5
 800055e:	d86f      	bhi.n	8000640 <turnOn+0xf0>
 8000560:	a201      	add	r2, pc, #4	; (adr r2, 8000568 <turnOn+0x18>)
 8000562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000566:	bf00      	nop
 8000568:	08000581 	.word	0x08000581
 800056c:	080005a1 	.word	0x080005a1
 8000570:	080005c1 	.word	0x080005c1
 8000574:	080005e1 	.word	0x080005e1
 8000578:	08000601 	.word	0x08000601
 800057c:	08000621 	.word	0x08000621
    {
        case RED1:
        	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 0);
 8000580:	2200      	movs	r2, #0
 8000582:	2102      	movs	r1, #2
 8000584:	4831      	ldr	r0, [pc, #196]	; (800064c <turnOn+0xfc>)
 8000586:	f001 fa0e 	bl	80019a6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, 1);
 800058a:	2201      	movs	r2, #1
 800058c:	2108      	movs	r1, #8
 800058e:	482f      	ldr	r0, [pc, #188]	; (800064c <turnOn+0xfc>)
 8000590:	f001 fa09 	bl	80019a6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, 1);
 8000594:	2201      	movs	r2, #1
 8000596:	2104      	movs	r1, #4
 8000598:	482c      	ldr	r0, [pc, #176]	; (800064c <turnOn+0xfc>)
 800059a:	f001 fa04 	bl	80019a6 <HAL_GPIO_WritePin>
            break;
 800059e:	e050      	b.n	8000642 <turnOn+0xf2>
        case RED2:
        	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, 0);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2110      	movs	r1, #16
 80005a4:	4829      	ldr	r0, [pc, #164]	; (800064c <turnOn+0xfc>)
 80005a6:	f001 f9fe 	bl	80019a6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, 1);
 80005aa:	2201      	movs	r2, #1
 80005ac:	2140      	movs	r1, #64	; 0x40
 80005ae:	4827      	ldr	r0, [pc, #156]	; (800064c <turnOn+0xfc>)
 80005b0:	f001 f9f9 	bl	80019a6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, 1);
 80005b4:	2201      	movs	r2, #1
 80005b6:	2120      	movs	r1, #32
 80005b8:	4824      	ldr	r0, [pc, #144]	; (800064c <turnOn+0xfc>)
 80005ba:	f001 f9f4 	bl	80019a6 <HAL_GPIO_WritePin>
            break;
 80005be:	e040      	b.n	8000642 <turnOn+0xf2>
        case GREEN1:
        	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, 0);
 80005c0:	2200      	movs	r2, #0
 80005c2:	2108      	movs	r1, #8
 80005c4:	4821      	ldr	r0, [pc, #132]	; (800064c <turnOn+0xfc>)
 80005c6:	f001 f9ee 	bl	80019a6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 1);
 80005ca:	2201      	movs	r2, #1
 80005cc:	2102      	movs	r1, #2
 80005ce:	481f      	ldr	r0, [pc, #124]	; (800064c <turnOn+0xfc>)
 80005d0:	f001 f9e9 	bl	80019a6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, 1);
 80005d4:	2201      	movs	r2, #1
 80005d6:	2104      	movs	r1, #4
 80005d8:	481c      	ldr	r0, [pc, #112]	; (800064c <turnOn+0xfc>)
 80005da:	f001 f9e4 	bl	80019a6 <HAL_GPIO_WritePin>
            break;
 80005de:	e030      	b.n	8000642 <turnOn+0xf2>
        case GREEN2:
        	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, 0);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2140      	movs	r1, #64	; 0x40
 80005e4:	4819      	ldr	r0, [pc, #100]	; (800064c <turnOn+0xfc>)
 80005e6:	f001 f9de 	bl	80019a6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, 1);
 80005ea:	2201      	movs	r2, #1
 80005ec:	2110      	movs	r1, #16
 80005ee:	4817      	ldr	r0, [pc, #92]	; (800064c <turnOn+0xfc>)
 80005f0:	f001 f9d9 	bl	80019a6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, 1);
 80005f4:	2201      	movs	r2, #1
 80005f6:	2120      	movs	r1, #32
 80005f8:	4814      	ldr	r0, [pc, #80]	; (800064c <turnOn+0xfc>)
 80005fa:	f001 f9d4 	bl	80019a6 <HAL_GPIO_WritePin>
            break;
 80005fe:	e020      	b.n	8000642 <turnOn+0xf2>
        case YELLOW1:
        	 HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, 0);
 8000600:	2200      	movs	r2, #0
 8000602:	2104      	movs	r1, #4
 8000604:	4811      	ldr	r0, [pc, #68]	; (800064c <turnOn+0xfc>)
 8000606:	f001 f9ce 	bl	80019a6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 1);
 800060a:	2201      	movs	r2, #1
 800060c:	2102      	movs	r1, #2
 800060e:	480f      	ldr	r0, [pc, #60]	; (800064c <turnOn+0xfc>)
 8000610:	f001 f9c9 	bl	80019a6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, 1);
 8000614:	2201      	movs	r2, #1
 8000616:	2108      	movs	r1, #8
 8000618:	480c      	ldr	r0, [pc, #48]	; (800064c <turnOn+0xfc>)
 800061a:	f001 f9c4 	bl	80019a6 <HAL_GPIO_WritePin>
            break;
 800061e:	e010      	b.n	8000642 <turnOn+0xf2>
        case YELLOW2:
        	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, 0);
 8000620:	2200      	movs	r2, #0
 8000622:	2120      	movs	r1, #32
 8000624:	4809      	ldr	r0, [pc, #36]	; (800064c <turnOn+0xfc>)
 8000626:	f001 f9be 	bl	80019a6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, 1);
 800062a:	2201      	movs	r2, #1
 800062c:	2110      	movs	r1, #16
 800062e:	4807      	ldr	r0, [pc, #28]	; (800064c <turnOn+0xfc>)
 8000630:	f001 f9b9 	bl	80019a6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, 1);
 8000634:	2201      	movs	r2, #1
 8000636:	2140      	movs	r1, #64	; 0x40
 8000638:	4804      	ldr	r0, [pc, #16]	; (800064c <turnOn+0xfc>)
 800063a:	f001 f9b4 	bl	80019a6 <HAL_GPIO_WritePin>
            break;
 800063e:	e000      	b.n	8000642 <turnOn+0xf2>
        default:
            break;
 8000640:	bf00      	nop
    }
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40010800 	.word	0x40010800

08000650 <blinking>:

void blinking(enum LED led){
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
	switch (led)
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	2b04      	cmp	r3, #4
 800065e:	d040      	beq.n	80006e2 <blinking+0x92>
 8000660:	2b04      	cmp	r3, #4
 8000662:	dc5b      	bgt.n	800071c <blinking+0xcc>
 8000664:	2b00      	cmp	r3, #0
 8000666:	d002      	beq.n	800066e <blinking+0x1e>
 8000668:	2b02      	cmp	r3, #2
 800066a:	d01d      	beq.n	80006a8 <blinking+0x58>
	            HAL_GPIO_TogglePin(YELLOW2_GPIO_Port, YELLOW2_Pin);
	            HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, 1);
	            HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, 1);
	            break;
	        default:
	            break;
 800066c:	e056      	b.n	800071c <blinking+0xcc>
	        	HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 800066e:	2102      	movs	r1, #2
 8000670:	482d      	ldr	r0, [pc, #180]	; (8000728 <blinking+0xd8>)
 8000672:	f001 f9b0 	bl	80019d6 <HAL_GPIO_TogglePin>
	            HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, 1);
 8000676:	2201      	movs	r2, #1
 8000678:	2108      	movs	r1, #8
 800067a:	482b      	ldr	r0, [pc, #172]	; (8000728 <blinking+0xd8>)
 800067c:	f001 f993 	bl	80019a6 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, 1);
 8000680:	2201      	movs	r2, #1
 8000682:	2104      	movs	r1, #4
 8000684:	4828      	ldr	r0, [pc, #160]	; (8000728 <blinking+0xd8>)
 8000686:	f001 f98e 	bl	80019a6 <HAL_GPIO_WritePin>
	            HAL_GPIO_TogglePin(RED2_GPIO_Port, RED2_Pin);
 800068a:	2110      	movs	r1, #16
 800068c:	4826      	ldr	r0, [pc, #152]	; (8000728 <blinking+0xd8>)
 800068e:	f001 f9a2 	bl	80019d6 <HAL_GPIO_TogglePin>
	            HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, 1);
 8000692:	2201      	movs	r2, #1
 8000694:	2140      	movs	r1, #64	; 0x40
 8000696:	4824      	ldr	r0, [pc, #144]	; (8000728 <blinking+0xd8>)
 8000698:	f001 f985 	bl	80019a6 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, 1);
 800069c:	2201      	movs	r2, #1
 800069e:	2120      	movs	r1, #32
 80006a0:	4821      	ldr	r0, [pc, #132]	; (8000728 <blinking+0xd8>)
 80006a2:	f001 f980 	bl	80019a6 <HAL_GPIO_WritePin>
	            break;
 80006a6:	e03a      	b.n	800071e <blinking+0xce>
	        	HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
 80006a8:	2108      	movs	r1, #8
 80006aa:	481f      	ldr	r0, [pc, #124]	; (8000728 <blinking+0xd8>)
 80006ac:	f001 f993 	bl	80019d6 <HAL_GPIO_TogglePin>
	            HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 1);
 80006b0:	2201      	movs	r2, #1
 80006b2:	2102      	movs	r1, #2
 80006b4:	481c      	ldr	r0, [pc, #112]	; (8000728 <blinking+0xd8>)
 80006b6:	f001 f976 	bl	80019a6 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, 1);
 80006ba:	2201      	movs	r2, #1
 80006bc:	2104      	movs	r1, #4
 80006be:	481a      	ldr	r0, [pc, #104]	; (8000728 <blinking+0xd8>)
 80006c0:	f001 f971 	bl	80019a6 <HAL_GPIO_WritePin>
	            HAL_GPIO_TogglePin(GREEN2_GPIO_Port, GREEN2_Pin);
 80006c4:	2140      	movs	r1, #64	; 0x40
 80006c6:	4818      	ldr	r0, [pc, #96]	; (8000728 <blinking+0xd8>)
 80006c8:	f001 f985 	bl	80019d6 <HAL_GPIO_TogglePin>
	            HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, 1);
 80006cc:	2201      	movs	r2, #1
 80006ce:	2110      	movs	r1, #16
 80006d0:	4815      	ldr	r0, [pc, #84]	; (8000728 <blinking+0xd8>)
 80006d2:	f001 f968 	bl	80019a6 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, 1);
 80006d6:	2201      	movs	r2, #1
 80006d8:	2120      	movs	r1, #32
 80006da:	4813      	ldr	r0, [pc, #76]	; (8000728 <blinking+0xd8>)
 80006dc:	f001 f963 	bl	80019a6 <HAL_GPIO_WritePin>
	            break;
 80006e0:	e01d      	b.n	800071e <blinking+0xce>
	        	HAL_GPIO_TogglePin(YELLOW1_GPIO_Port, YELLOW1_Pin);
 80006e2:	2104      	movs	r1, #4
 80006e4:	4810      	ldr	r0, [pc, #64]	; (8000728 <blinking+0xd8>)
 80006e6:	f001 f976 	bl	80019d6 <HAL_GPIO_TogglePin>
	            HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 1);
 80006ea:	2201      	movs	r2, #1
 80006ec:	2102      	movs	r1, #2
 80006ee:	480e      	ldr	r0, [pc, #56]	; (8000728 <blinking+0xd8>)
 80006f0:	f001 f959 	bl	80019a6 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, 1);
 80006f4:	2201      	movs	r2, #1
 80006f6:	2108      	movs	r1, #8
 80006f8:	480b      	ldr	r0, [pc, #44]	; (8000728 <blinking+0xd8>)
 80006fa:	f001 f954 	bl	80019a6 <HAL_GPIO_WritePin>
	            HAL_GPIO_TogglePin(YELLOW2_GPIO_Port, YELLOW2_Pin);
 80006fe:	2120      	movs	r1, #32
 8000700:	4809      	ldr	r0, [pc, #36]	; (8000728 <blinking+0xd8>)
 8000702:	f001 f968 	bl	80019d6 <HAL_GPIO_TogglePin>
	            HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, 1);
 8000706:	2201      	movs	r2, #1
 8000708:	2110      	movs	r1, #16
 800070a:	4807      	ldr	r0, [pc, #28]	; (8000728 <blinking+0xd8>)
 800070c:	f001 f94b 	bl	80019a6 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, 1);
 8000710:	2201      	movs	r2, #1
 8000712:	2140      	movs	r1, #64	; 0x40
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <blinking+0xd8>)
 8000716:	f001 f946 	bl	80019a6 <HAL_GPIO_WritePin>
	            break;
 800071a:	e000      	b.n	800071e <blinking+0xce>
	            break;
 800071c:	bf00      	nop
	    }
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40010800 	.word	0x40010800

0800072c <fsm_init>:
 *      Author: ADMIN
 */
#include "fsm_automatic.h"

void fsm_init()
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
	redCounter = redDuration / 100;
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <fsm_init+0x50>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a12      	ldr	r2, [pc, #72]	; (8000780 <fsm_init+0x54>)
 8000736:	fb82 1203 	smull	r1, r2, r2, r3
 800073a:	1152      	asrs	r2, r2, #5
 800073c:	17db      	asrs	r3, r3, #31
 800073e:	1ad3      	subs	r3, r2, r3
 8000740:	4a10      	ldr	r2, [pc, #64]	; (8000784 <fsm_init+0x58>)
 8000742:	6013      	str	r3, [r2, #0]
	greenCounter = greenDuration / 100;
 8000744:	4b10      	ldr	r3, [pc, #64]	; (8000788 <fsm_init+0x5c>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a0d      	ldr	r2, [pc, #52]	; (8000780 <fsm_init+0x54>)
 800074a:	fb82 1203 	smull	r1, r2, r2, r3
 800074e:	1152      	asrs	r2, r2, #5
 8000750:	17db      	asrs	r3, r3, #31
 8000752:	1ad3      	subs	r3, r2, r3
 8000754:	4a0d      	ldr	r2, [pc, #52]	; (800078c <fsm_init+0x60>)
 8000756:	6013      	str	r3, [r2, #0]
	yellowCounter = yellowDuration / 100;
 8000758:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <fsm_init+0x64>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a08      	ldr	r2, [pc, #32]	; (8000780 <fsm_init+0x54>)
 800075e:	fb82 1203 	smull	r1, r2, r2, r3
 8000762:	1152      	asrs	r2, r2, #5
 8000764:	17db      	asrs	r3, r3, #31
 8000766:	1ad3      	subs	r3, r2, r3
 8000768:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <fsm_init+0x68>)
 800076a:	6013      	str	r3, [r2, #0]
	mode = 1;
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <fsm_init+0x6c>)
 800076e:	2201      	movs	r2, #1
 8000770:	601a      	str	r2, [r3, #0]
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	20000010 	.word	0x20000010
 8000780:	51eb851f 	.word	0x51eb851f
 8000784:	200000c8 	.word	0x200000c8
 8000788:	20000014 	.word	0x20000014
 800078c:	200000c4 	.word	0x200000c4
 8000790:	20000018 	.word	0x20000018
 8000794:	200000c0 	.word	0x200000c0
 8000798:	20000064 	.word	0x20000064

0800079c <fsm_automatic_run>:

void fsm_automatic_run(){
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	if (isButtonPressed(0))
 80007a0:	2000      	movs	r0, #0
 80007a2:	f7ff fd0f 	bl	80001c4 <isButtonPressed>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d019      	beq.n	80007e0 <fsm_automatic_run+0x44>
		{
			clearAll();
 80007ac:	f7ff fe2a 	bl	8000404 <clearAll>
			status = MAN_RED;
 80007b0:	4b84      	ldr	r3, [pc, #528]	; (80009c4 <fsm_automatic_run+0x228>)
 80007b2:	2214      	movs	r2, #20
 80007b4:	601a      	str	r2, [r3, #0]
			mode = 2;
 80007b6:	4b84      	ldr	r3, [pc, #528]	; (80009c8 <fsm_automatic_run+0x22c>)
 80007b8:	2202      	movs	r2, #2
 80007ba:	601a      	str	r2, [r3, #0]
			tempRed = redDuration;
 80007bc:	4b83      	ldr	r3, [pc, #524]	; (80009cc <fsm_automatic_run+0x230>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a83      	ldr	r2, [pc, #524]	; (80009d0 <fsm_automatic_run+0x234>)
 80007c2:	6013      	str	r3, [r2, #0]
			tempGreen = greenDuration;
 80007c4:	4b83      	ldr	r3, [pc, #524]	; (80009d4 <fsm_automatic_run+0x238>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a83      	ldr	r2, [pc, #524]	; (80009d8 <fsm_automatic_run+0x23c>)
 80007ca:	6013      	str	r3, [r2, #0]
			tempYellow = yellowDuration;
 80007cc:	4b83      	ldr	r3, [pc, #524]	; (80009dc <fsm_automatic_run+0x240>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a83      	ldr	r2, [pc, #524]	; (80009e0 <fsm_automatic_run+0x244>)
 80007d2:	6013      	str	r3, [r2, #0]
			isButtonPressed(1);
 80007d4:	2001      	movs	r0, #1
 80007d6:	f7ff fcf5 	bl	80001c4 <isButtonPressed>
			isButtonPressed(2);
 80007da:	2002      	movs	r0, #2
 80007dc:	f7ff fcf2 	bl	80001c4 <isButtonPressed>
		}
	switch(status){
 80007e0:	4b78      	ldr	r3, [pc, #480]	; (80009c4 <fsm_automatic_run+0x228>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	3b01      	subs	r3, #1
 80007e6:	2b04      	cmp	r3, #4
 80007e8:	f200 80d5 	bhi.w	8000996 <fsm_automatic_run+0x1fa>
 80007ec:	a201      	add	r2, pc, #4	; (adr r2, 80007f4 <fsm_automatic_run+0x58>)
 80007ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007f2:	bf00      	nop
 80007f4:	08000809 	.word	0x08000809
 80007f8:	0800081d 	.word	0x0800081d
 80007fc:	08000873 	.word	0x08000873
 8000800:	080008db 	.word	0x080008db
 8000804:	0800092f 	.word	0x0800092f
	case INIT:
	{
		clearAll();
 8000808:	f7ff fdfc 	bl	8000404 <clearAll>
		initButton();
 800080c:	f7ff fc9e 	bl	800014c <initButton>
		fsm_init();
 8000810:	f7ff ff8c 	bl	800072c <fsm_init>
		status = RED1_GREEN2;
 8000814:	4b6b      	ldr	r3, [pc, #428]	; (80009c4 <fsm_automatic_run+0x228>)
 8000816:	2202      	movs	r2, #2
 8000818:	601a      	str	r2, [r3, #0]
		break;
 800081a:	e0c5      	b.n	80009a8 <fsm_automatic_run+0x20c>
	}
	case RED1_GREEN2:
	{
		turnOn(RED1);
 800081c:	2000      	movs	r0, #0
 800081e:	f7ff fe97 	bl	8000550 <turnOn>
		turnOn(GREEN2);
 8000822:	2003      	movs	r0, #3
 8000824:	f7ff fe94 	bl	8000550 <turnOn>
		horizontal = redCounter;
 8000828:	4b6e      	ldr	r3, [pc, #440]	; (80009e4 <fsm_automatic_run+0x248>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a6e      	ldr	r2, [pc, #440]	; (80009e8 <fsm_automatic_run+0x24c>)
 800082e:	6013      	str	r3, [r2, #0]
		vertical = greenCounter;
 8000830:	4b6e      	ldr	r3, [pc, #440]	; (80009ec <fsm_automatic_run+0x250>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a6e      	ldr	r2, [pc, #440]	; (80009f0 <fsm_automatic_run+0x254>)
 8000836:	6013      	str	r3, [r2, #0]
		redCounter--;
 8000838:	4b6a      	ldr	r3, [pc, #424]	; (80009e4 <fsm_automatic_run+0x248>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	3b01      	subs	r3, #1
 800083e:	4a69      	ldr	r2, [pc, #420]	; (80009e4 <fsm_automatic_run+0x248>)
 8000840:	6013      	str	r3, [r2, #0]
		greenCounter--;
 8000842:	4b6a      	ldr	r3, [pc, #424]	; (80009ec <fsm_automatic_run+0x250>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	3b01      	subs	r3, #1
 8000848:	4a68      	ldr	r2, [pc, #416]	; (80009ec <fsm_automatic_run+0x250>)
 800084a:	6013      	str	r3, [r2, #0]
		if(greenCounter <= 0 ){
 800084c:	4b67      	ldr	r3, [pc, #412]	; (80009ec <fsm_automatic_run+0x250>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	f300 80a2 	bgt.w	800099a <fsm_automatic_run+0x1fe>
		status = RED1_YELLOW2;
 8000856:	4b5b      	ldr	r3, [pc, #364]	; (80009c4 <fsm_automatic_run+0x228>)
 8000858:	2203      	movs	r2, #3
 800085a:	601a      	str	r2, [r3, #0]
		yellowCounter = yellowDuration/100;
 800085c:	4b5f      	ldr	r3, [pc, #380]	; (80009dc <fsm_automatic_run+0x240>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a64      	ldr	r2, [pc, #400]	; (80009f4 <fsm_automatic_run+0x258>)
 8000862:	fb82 1203 	smull	r1, r2, r2, r3
 8000866:	1152      	asrs	r2, r2, #5
 8000868:	17db      	asrs	r3, r3, #31
 800086a:	1ad3      	subs	r3, r2, r3
 800086c:	4a62      	ldr	r2, [pc, #392]	; (80009f8 <fsm_automatic_run+0x25c>)
 800086e:	6013      	str	r3, [r2, #0]
		}

		break;
 8000870:	e093      	b.n	800099a <fsm_automatic_run+0x1fe>
	}
	case RED1_YELLOW2:
	{
		turnOn(RED1);
 8000872:	2000      	movs	r0, #0
 8000874:	f7ff fe6c 	bl	8000550 <turnOn>
		turnOn(YELLOW2);
 8000878:	2005      	movs	r0, #5
 800087a:	f7ff fe69 	bl	8000550 <turnOn>
		horizontal = redCounter;
 800087e:	4b59      	ldr	r3, [pc, #356]	; (80009e4 <fsm_automatic_run+0x248>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a59      	ldr	r2, [pc, #356]	; (80009e8 <fsm_automatic_run+0x24c>)
 8000884:	6013      	str	r3, [r2, #0]
		vertical = yellowCounter;
 8000886:	4b5c      	ldr	r3, [pc, #368]	; (80009f8 <fsm_automatic_run+0x25c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a59      	ldr	r2, [pc, #356]	; (80009f0 <fsm_automatic_run+0x254>)
 800088c:	6013      	str	r3, [r2, #0]
		redCounter--;
 800088e:	4b55      	ldr	r3, [pc, #340]	; (80009e4 <fsm_automatic_run+0x248>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	3b01      	subs	r3, #1
 8000894:	4a53      	ldr	r2, [pc, #332]	; (80009e4 <fsm_automatic_run+0x248>)
 8000896:	6013      	str	r3, [r2, #0]
		yellowCounter--;
 8000898:	4b57      	ldr	r3, [pc, #348]	; (80009f8 <fsm_automatic_run+0x25c>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	3b01      	subs	r3, #1
 800089e:	4a56      	ldr	r2, [pc, #344]	; (80009f8 <fsm_automatic_run+0x25c>)
 80008a0:	6013      	str	r3, [r2, #0]
		if(redCounter <= 0 ){
 80008a2:	4b50      	ldr	r3, [pc, #320]	; (80009e4 <fsm_automatic_run+0x248>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	dc79      	bgt.n	800099e <fsm_automatic_run+0x202>
		status = GREEN1_RED2;
 80008aa:	4b46      	ldr	r3, [pc, #280]	; (80009c4 <fsm_automatic_run+0x228>)
 80008ac:	2204      	movs	r2, #4
 80008ae:	601a      	str	r2, [r3, #0]
		redCounter = redDuration / 100;
 80008b0:	4b46      	ldr	r3, [pc, #280]	; (80009cc <fsm_automatic_run+0x230>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a4f      	ldr	r2, [pc, #316]	; (80009f4 <fsm_automatic_run+0x258>)
 80008b6:	fb82 1203 	smull	r1, r2, r2, r3
 80008ba:	1152      	asrs	r2, r2, #5
 80008bc:	17db      	asrs	r3, r3, #31
 80008be:	1ad3      	subs	r3, r2, r3
 80008c0:	4a48      	ldr	r2, [pc, #288]	; (80009e4 <fsm_automatic_run+0x248>)
 80008c2:	6013      	str	r3, [r2, #0]
		greenCounter = greenDuration / 100;
 80008c4:	4b43      	ldr	r3, [pc, #268]	; (80009d4 <fsm_automatic_run+0x238>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a4a      	ldr	r2, [pc, #296]	; (80009f4 <fsm_automatic_run+0x258>)
 80008ca:	fb82 1203 	smull	r1, r2, r2, r3
 80008ce:	1152      	asrs	r2, r2, #5
 80008d0:	17db      	asrs	r3, r3, #31
 80008d2:	1ad3      	subs	r3, r2, r3
 80008d4:	4a45      	ldr	r2, [pc, #276]	; (80009ec <fsm_automatic_run+0x250>)
 80008d6:	6013      	str	r3, [r2, #0]
		}

		break;
 80008d8:	e061      	b.n	800099e <fsm_automatic_run+0x202>
	}
	case GREEN1_RED2:
		{
			turnOn(GREEN1);
 80008da:	2002      	movs	r0, #2
 80008dc:	f7ff fe38 	bl	8000550 <turnOn>
			turnOn(RED2);
 80008e0:	2001      	movs	r0, #1
 80008e2:	f7ff fe35 	bl	8000550 <turnOn>
			horizontal = greenCounter;
 80008e6:	4b41      	ldr	r3, [pc, #260]	; (80009ec <fsm_automatic_run+0x250>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a3f      	ldr	r2, [pc, #252]	; (80009e8 <fsm_automatic_run+0x24c>)
 80008ec:	6013      	str	r3, [r2, #0]
			vertical = redCounter;
 80008ee:	4b3d      	ldr	r3, [pc, #244]	; (80009e4 <fsm_automatic_run+0x248>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a3f      	ldr	r2, [pc, #252]	; (80009f0 <fsm_automatic_run+0x254>)
 80008f4:	6013      	str	r3, [r2, #0]
			redCounter--;
 80008f6:	4b3b      	ldr	r3, [pc, #236]	; (80009e4 <fsm_automatic_run+0x248>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	4a39      	ldr	r2, [pc, #228]	; (80009e4 <fsm_automatic_run+0x248>)
 80008fe:	6013      	str	r3, [r2, #0]
			greenCounter--;
 8000900:	4b3a      	ldr	r3, [pc, #232]	; (80009ec <fsm_automatic_run+0x250>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	3b01      	subs	r3, #1
 8000906:	4a39      	ldr	r2, [pc, #228]	; (80009ec <fsm_automatic_run+0x250>)
 8000908:	6013      	str	r3, [r2, #0]
			if(greenCounter <= 0 ){
 800090a:	4b38      	ldr	r3, [pc, #224]	; (80009ec <fsm_automatic_run+0x250>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	dc47      	bgt.n	80009a2 <fsm_automatic_run+0x206>
			status = YELLOW1_RED2;
 8000912:	4b2c      	ldr	r3, [pc, #176]	; (80009c4 <fsm_automatic_run+0x228>)
 8000914:	2205      	movs	r2, #5
 8000916:	601a      	str	r2, [r3, #0]
			yellowCounter = yellowDuration/100;
 8000918:	4b30      	ldr	r3, [pc, #192]	; (80009dc <fsm_automatic_run+0x240>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a35      	ldr	r2, [pc, #212]	; (80009f4 <fsm_automatic_run+0x258>)
 800091e:	fb82 1203 	smull	r1, r2, r2, r3
 8000922:	1152      	asrs	r2, r2, #5
 8000924:	17db      	asrs	r3, r3, #31
 8000926:	1ad3      	subs	r3, r2, r3
 8000928:	4a33      	ldr	r2, [pc, #204]	; (80009f8 <fsm_automatic_run+0x25c>)
 800092a:	6013      	str	r3, [r2, #0]
			}

			break;
 800092c:	e039      	b.n	80009a2 <fsm_automatic_run+0x206>
		}
	case YELLOW1_RED2:
		{
			turnOn(YELLOW1);
 800092e:	2004      	movs	r0, #4
 8000930:	f7ff fe0e 	bl	8000550 <turnOn>
			turnOn(RED2);
 8000934:	2001      	movs	r0, #1
 8000936:	f7ff fe0b 	bl	8000550 <turnOn>
			horizontal = yellowCounter;
 800093a:	4b2f      	ldr	r3, [pc, #188]	; (80009f8 <fsm_automatic_run+0x25c>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a2a      	ldr	r2, [pc, #168]	; (80009e8 <fsm_automatic_run+0x24c>)
 8000940:	6013      	str	r3, [r2, #0]
			vertical = redCounter;
 8000942:	4b28      	ldr	r3, [pc, #160]	; (80009e4 <fsm_automatic_run+0x248>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a2a      	ldr	r2, [pc, #168]	; (80009f0 <fsm_automatic_run+0x254>)
 8000948:	6013      	str	r3, [r2, #0]
			redCounter--;
 800094a:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <fsm_automatic_run+0x248>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	3b01      	subs	r3, #1
 8000950:	4a24      	ldr	r2, [pc, #144]	; (80009e4 <fsm_automatic_run+0x248>)
 8000952:	6013      	str	r3, [r2, #0]
			yellowCounter--;
 8000954:	4b28      	ldr	r3, [pc, #160]	; (80009f8 <fsm_automatic_run+0x25c>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	3b01      	subs	r3, #1
 800095a:	4a27      	ldr	r2, [pc, #156]	; (80009f8 <fsm_automatic_run+0x25c>)
 800095c:	6013      	str	r3, [r2, #0]
			if(redCounter <= 0 ){
 800095e:	4b21      	ldr	r3, [pc, #132]	; (80009e4 <fsm_automatic_run+0x248>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	dc1f      	bgt.n	80009a6 <fsm_automatic_run+0x20a>
			status = RED1_GREEN2;
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <fsm_automatic_run+0x228>)
 8000968:	2202      	movs	r2, #2
 800096a:	601a      	str	r2, [r3, #0]
			redCounter = redDuration / 100;
 800096c:	4b17      	ldr	r3, [pc, #92]	; (80009cc <fsm_automatic_run+0x230>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a20      	ldr	r2, [pc, #128]	; (80009f4 <fsm_automatic_run+0x258>)
 8000972:	fb82 1203 	smull	r1, r2, r2, r3
 8000976:	1152      	asrs	r2, r2, #5
 8000978:	17db      	asrs	r3, r3, #31
 800097a:	1ad3      	subs	r3, r2, r3
 800097c:	4a19      	ldr	r2, [pc, #100]	; (80009e4 <fsm_automatic_run+0x248>)
 800097e:	6013      	str	r3, [r2, #0]
			greenCounter = greenDuration / 100;
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <fsm_automatic_run+0x238>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a1b      	ldr	r2, [pc, #108]	; (80009f4 <fsm_automatic_run+0x258>)
 8000986:	fb82 1203 	smull	r1, r2, r2, r3
 800098a:	1152      	asrs	r2, r2, #5
 800098c:	17db      	asrs	r3, r3, #31
 800098e:	1ad3      	subs	r3, r2, r3
 8000990:	4a16      	ldr	r2, [pc, #88]	; (80009ec <fsm_automatic_run+0x250>)
 8000992:	6013      	str	r3, [r2, #0]
			}
			break;
 8000994:	e007      	b.n	80009a6 <fsm_automatic_run+0x20a>
		}
	default:
		break;
 8000996:	bf00      	nop
 8000998:	e006      	b.n	80009a8 <fsm_automatic_run+0x20c>
		break;
 800099a:	bf00      	nop
 800099c:	e004      	b.n	80009a8 <fsm_automatic_run+0x20c>
		break;
 800099e:	bf00      	nop
 80009a0:	e002      	b.n	80009a8 <fsm_automatic_run+0x20c>
			break;
 80009a2:	bf00      	nop
 80009a4:	e000      	b.n	80009a8 <fsm_automatic_run+0x20c>
			break;
 80009a6:	bf00      	nop
	}
	if (mode == 1) {
 80009a8:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <fsm_automatic_run+0x22c>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d107      	bne.n	80009c0 <fsm_automatic_run+0x224>
		updateLedBuffer(horizontal,vertical);
 80009b0:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <fsm_automatic_run+0x24c>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <fsm_automatic_run+0x254>)
 80009b6:	6812      	ldr	r2, [r2, #0]
 80009b8:	4611      	mov	r1, r2
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff fd8c 	bl	80004d8 <updateLedBuffer>
	}
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000058 	.word	0x20000058
 80009c8:	20000064 	.word	0x20000064
 80009cc:	20000010 	.word	0x20000010
 80009d0:	200000b8 	.word	0x200000b8
 80009d4:	20000014 	.word	0x20000014
 80009d8:	200000cc 	.word	0x200000cc
 80009dc:	20000018 	.word	0x20000018
 80009e0:	200000bc 	.word	0x200000bc
 80009e4:	200000c8 	.word	0x200000c8
 80009e8:	2000005c 	.word	0x2000005c
 80009ec:	200000c4 	.word	0x200000c4
 80009f0:	20000060 	.word	0x20000060
 80009f4:	51eb851f 	.word	0x51eb851f
 80009f8:	200000c0 	.word	0x200000c0

080009fc <fsm_manual_run>:
 *      Author: ADMIN
 */

#include "fsm_manual.h"

void fsm_manual_run(){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	switch(status){
 8000a00:	4b9c      	ldr	r3, [pc, #624]	; (8000c74 <fsm_manual_run+0x278>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	3b14      	subs	r3, #20
 8000a06:	2b03      	cmp	r3, #3
 8000a08:	f200 812a 	bhi.w	8000c60 <fsm_manual_run+0x264>
 8000a0c:	a201      	add	r2, pc, #4	; (adr r2, 8000a14 <fsm_manual_run+0x18>)
 8000a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a12:	bf00      	nop
 8000a14:	08000a25 	.word	0x08000a25
 8000a18:	08000b2d 	.word	0x08000b2d
 8000a1c:	08000aa9 	.word	0x08000aa9
 8000a20:	08000c01 	.word	0x08000c01
	case MAN_RED:
	{
		blinking(RED1);
 8000a24:	2000      	movs	r0, #0
 8000a26:	f7ff fe13 	bl	8000650 <blinking>
		updateLedBuffer(mode, redDuration / 100);
 8000a2a:	4b93      	ldr	r3, [pc, #588]	; (8000c78 <fsm_manual_run+0x27c>)
 8000a2c:	6818      	ldr	r0, [r3, #0]
 8000a2e:	4b93      	ldr	r3, [pc, #588]	; (8000c7c <fsm_manual_run+0x280>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a93      	ldr	r2, [pc, #588]	; (8000c80 <fsm_manual_run+0x284>)
 8000a34:	fb82 1203 	smull	r1, r2, r2, r3
 8000a38:	1152      	asrs	r2, r2, #5
 8000a3a:	17db      	asrs	r3, r3, #31
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	4619      	mov	r1, r3
 8000a40:	f7ff fd4a 	bl	80004d8 <updateLedBuffer>
		if(isButtonPressed(0) == 1){
 8000a44:	2000      	movs	r0, #0
 8000a46:	f7ff fbbd 	bl	80001c4 <isButtonPressed>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d10f      	bne.n	8000a70 <fsm_manual_run+0x74>
			if(isButtonPressed(2) == 0){
 8000a50:	2002      	movs	r0, #2
 8000a52:	f7ff fbb7 	bl	80001c4 <isButtonPressed>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d103      	bne.n	8000a64 <fsm_manual_run+0x68>
						redDuration = tempRed;
 8000a5c:	4b89      	ldr	r3, [pc, #548]	; (8000c84 <fsm_manual_run+0x288>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a86      	ldr	r2, [pc, #536]	; (8000c7c <fsm_manual_run+0x280>)
 8000a62:	6013      	str	r3, [r2, #0]
					}
			status = MAN_YELLOW;
 8000a64:	4b83      	ldr	r3, [pc, #524]	; (8000c74 <fsm_manual_run+0x278>)
 8000a66:	2216      	movs	r2, #22
 8000a68:	601a      	str	r2, [r3, #0]
			mode = 3;
 8000a6a:	4b83      	ldr	r3, [pc, #524]	; (8000c78 <fsm_manual_run+0x27c>)
 8000a6c:	2203      	movs	r2, #3
 8000a6e:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(1) == 1 && mode == 2){
 8000a70:	2001      	movs	r0, #1
 8000a72:	f7ff fba7 	bl	80001c4 <isButtonPressed>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	f040 80f3 	bne.w	8000c64 <fsm_manual_run+0x268>
 8000a7e:	4b7e      	ldr	r3, [pc, #504]	; (8000c78 <fsm_manual_run+0x27c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	2b02      	cmp	r3, #2
 8000a84:	f040 80ee 	bne.w	8000c64 <fsm_manual_run+0x268>
			redDuration += 100;
 8000a88:	4b7c      	ldr	r3, [pc, #496]	; (8000c7c <fsm_manual_run+0x280>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	3364      	adds	r3, #100	; 0x64
 8000a8e:	4a7b      	ldr	r2, [pc, #492]	; (8000c7c <fsm_manual_run+0x280>)
 8000a90:	6013      	str	r3, [r2, #0]
			if(redDuration > 9900){
 8000a92:	4b7a      	ldr	r3, [pc, #488]	; (8000c7c <fsm_manual_run+0x280>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f242 62ac 	movw	r2, #9900	; 0x26ac
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	f340 80e2 	ble.w	8000c64 <fsm_manual_run+0x268>
				redDuration = 100;
 8000aa0:	4b76      	ldr	r3, [pc, #472]	; (8000c7c <fsm_manual_run+0x280>)
 8000aa2:	2264      	movs	r2, #100	; 0x64
 8000aa4:	601a      	str	r2, [r3, #0]
			}
		}
		break;
 8000aa6:	e0dd      	b.n	8000c64 <fsm_manual_run+0x268>
	}
	case MAN_YELLOW:
		{
			blinking(YELLOW1);
 8000aa8:	2004      	movs	r0, #4
 8000aaa:	f7ff fdd1 	bl	8000650 <blinking>
			updateLedBuffer(mode, yellowDuration / 100);
 8000aae:	4b72      	ldr	r3, [pc, #456]	; (8000c78 <fsm_manual_run+0x27c>)
 8000ab0:	6818      	ldr	r0, [r3, #0]
 8000ab2:	4b75      	ldr	r3, [pc, #468]	; (8000c88 <fsm_manual_run+0x28c>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a72      	ldr	r2, [pc, #456]	; (8000c80 <fsm_manual_run+0x284>)
 8000ab8:	fb82 1203 	smull	r1, r2, r2, r3
 8000abc:	1152      	asrs	r2, r2, #5
 8000abe:	17db      	asrs	r3, r3, #31
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	f7ff fd08 	bl	80004d8 <updateLedBuffer>
			}
			if(isButtonPressed(0) == 1){
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f7ff fb7b 	bl	80001c4 <isButtonPressed>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d10f      	bne.n	8000af4 <fsm_manual_run+0xf8>
				if(isButtonPressed(2) == 0){
 8000ad4:	2002      	movs	r0, #2
 8000ad6:	f7ff fb75 	bl	80001c4 <isButtonPressed>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d103      	bne.n	8000ae8 <fsm_manual_run+0xec>
							yellowDuration = tempYellow;
 8000ae0:	4b6a      	ldr	r3, [pc, #424]	; (8000c8c <fsm_manual_run+0x290>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a68      	ldr	r2, [pc, #416]	; (8000c88 <fsm_manual_run+0x28c>)
 8000ae6:	6013      	str	r3, [r2, #0]
						}
				status = MAN_GREEN;
 8000ae8:	4b62      	ldr	r3, [pc, #392]	; (8000c74 <fsm_manual_run+0x278>)
 8000aea:	2215      	movs	r2, #21
 8000aec:	601a      	str	r2, [r3, #0]
				mode = 4;
 8000aee:	4b62      	ldr	r3, [pc, #392]	; (8000c78 <fsm_manual_run+0x27c>)
 8000af0:	2204      	movs	r2, #4
 8000af2:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(1) == 1 && mode == 3){
 8000af4:	2001      	movs	r0, #1
 8000af6:	f7ff fb65 	bl	80001c4 <isButtonPressed>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	f040 80b3 	bne.w	8000c68 <fsm_manual_run+0x26c>
 8000b02:	4b5d      	ldr	r3, [pc, #372]	; (8000c78 <fsm_manual_run+0x27c>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2b03      	cmp	r3, #3
 8000b08:	f040 80ae 	bne.w	8000c68 <fsm_manual_run+0x26c>
				yellowDuration += 100;
 8000b0c:	4b5e      	ldr	r3, [pc, #376]	; (8000c88 <fsm_manual_run+0x28c>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	3364      	adds	r3, #100	; 0x64
 8000b12:	4a5d      	ldr	r2, [pc, #372]	; (8000c88 <fsm_manual_run+0x28c>)
 8000b14:	6013      	str	r3, [r2, #0]
				if(yellowDuration > 9900){
 8000b16:	4b5c      	ldr	r3, [pc, #368]	; (8000c88 <fsm_manual_run+0x28c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f242 62ac 	movw	r2, #9900	; 0x26ac
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	f340 80a2 	ble.w	8000c68 <fsm_manual_run+0x26c>
					yellowDuration = 100;
 8000b24:	4b58      	ldr	r3, [pc, #352]	; (8000c88 <fsm_manual_run+0x28c>)
 8000b26:	2264      	movs	r2, #100	; 0x64
 8000b28:	601a      	str	r2, [r3, #0]
				}
			}
			break;
 8000b2a:	e09d      	b.n	8000c68 <fsm_manual_run+0x26c>
	case MAN_GREEN:
		{
			updateLedBuffer(mode, greenDuration / 100);
 8000b2c:	4b52      	ldr	r3, [pc, #328]	; (8000c78 <fsm_manual_run+0x27c>)
 8000b2e:	6818      	ldr	r0, [r3, #0]
 8000b30:	4b57      	ldr	r3, [pc, #348]	; (8000c90 <fsm_manual_run+0x294>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a52      	ldr	r2, [pc, #328]	; (8000c80 <fsm_manual_run+0x284>)
 8000b36:	fb82 1203 	smull	r1, r2, r2, r3
 8000b3a:	1152      	asrs	r2, r2, #5
 8000b3c:	17db      	asrs	r3, r3, #31
 8000b3e:	1ad3      	subs	r3, r2, r3
 8000b40:	4619      	mov	r1, r3
 8000b42:	f7ff fcc9 	bl	80004d8 <updateLedBuffer>
			blinking(GREEN1);
 8000b46:	2002      	movs	r0, #2
 8000b48:	f7ff fd82 	bl	8000650 <blinking>
			if(isButtonPressed(0) == 1){
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f7ff fb39 	bl	80001c4 <isButtonPressed>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d13a      	bne.n	8000bce <fsm_manual_run+0x1d2>
				if(isButtonPressed(2) == 0){
 8000b58:	2002      	movs	r0, #2
 8000b5a:	f7ff fb33 	bl	80001c4 <isButtonPressed>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d103      	bne.n	8000b6c <fsm_manual_run+0x170>
							greenDuration = tempGreen;
 8000b64:	4b4b      	ldr	r3, [pc, #300]	; (8000c94 <fsm_manual_run+0x298>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a49      	ldr	r2, [pc, #292]	; (8000c90 <fsm_manual_run+0x294>)
 8000b6a:	6013      	str	r3, [r2, #0]
						}
				if (redDuration == (greenDuration + yellowDuration))
 8000b6c:	4b48      	ldr	r3, [pc, #288]	; (8000c90 <fsm_manual_run+0x294>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4b45      	ldr	r3, [pc, #276]	; (8000c88 <fsm_manual_run+0x28c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	441a      	add	r2, r3
 8000b76:	4b41      	ldr	r3, [pc, #260]	; (8000c7c <fsm_manual_run+0x280>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d124      	bne.n	8000bc8 <fsm_manual_run+0x1cc>
				{
					status = RED1_GREEN2;
 8000b7e:	4b3d      	ldr	r3, [pc, #244]	; (8000c74 <fsm_manual_run+0x278>)
 8000b80:	2202      	movs	r2, #2
 8000b82:	601a      	str	r2, [r3, #0]
					redCounter = redDuration / 100;
 8000b84:	4b3d      	ldr	r3, [pc, #244]	; (8000c7c <fsm_manual_run+0x280>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a3d      	ldr	r2, [pc, #244]	; (8000c80 <fsm_manual_run+0x284>)
 8000b8a:	fb82 1203 	smull	r1, r2, r2, r3
 8000b8e:	1152      	asrs	r2, r2, #5
 8000b90:	17db      	asrs	r3, r3, #31
 8000b92:	1ad3      	subs	r3, r2, r3
 8000b94:	4a40      	ldr	r2, [pc, #256]	; (8000c98 <fsm_manual_run+0x29c>)
 8000b96:	6013      	str	r3, [r2, #0]
					greenCounter = greenDuration / 100;
 8000b98:	4b3d      	ldr	r3, [pc, #244]	; (8000c90 <fsm_manual_run+0x294>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a38      	ldr	r2, [pc, #224]	; (8000c80 <fsm_manual_run+0x284>)
 8000b9e:	fb82 1203 	smull	r1, r2, r2, r3
 8000ba2:	1152      	asrs	r2, r2, #5
 8000ba4:	17db      	asrs	r3, r3, #31
 8000ba6:	1ad3      	subs	r3, r2, r3
 8000ba8:	4a3c      	ldr	r2, [pc, #240]	; (8000c9c <fsm_manual_run+0x2a0>)
 8000baa:	6013      	str	r3, [r2, #0]
					yellowCounter = yellowDuration / 100;
 8000bac:	4b36      	ldr	r3, [pc, #216]	; (8000c88 <fsm_manual_run+0x28c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a33      	ldr	r2, [pc, #204]	; (8000c80 <fsm_manual_run+0x284>)
 8000bb2:	fb82 1203 	smull	r1, r2, r2, r3
 8000bb6:	1152      	asrs	r2, r2, #5
 8000bb8:	17db      	asrs	r3, r3, #31
 8000bba:	1ad3      	subs	r3, r2, r3
 8000bbc:	4a38      	ldr	r2, [pc, #224]	; (8000ca0 <fsm_manual_run+0x2a4>)
 8000bbe:	6013      	str	r3, [r2, #0]
					mode = 1;
 8000bc0:	4b2d      	ldr	r3, [pc, #180]	; (8000c78 <fsm_manual_run+0x27c>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	e002      	b.n	8000bce <fsm_manual_run+0x1d2>
				}
				else
				{
					status = ERROR;
 8000bc8:	4b2a      	ldr	r3, [pc, #168]	; (8000c74 <fsm_manual_run+0x278>)
 8000bca:	2217      	movs	r2, #23
 8000bcc:	601a      	str	r2, [r3, #0]
				}
			}
			if (isButtonPressed(1) == 1 && mode == 4)
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f7ff faf8 	bl	80001c4 <isButtonPressed>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d148      	bne.n	8000c6c <fsm_manual_run+0x270>
 8000bda:	4b27      	ldr	r3, [pc, #156]	; (8000c78 <fsm_manual_run+0x27c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	d144      	bne.n	8000c6c <fsm_manual_run+0x270>
			{
				greenDuration += 100;
 8000be2:	4b2b      	ldr	r3, [pc, #172]	; (8000c90 <fsm_manual_run+0x294>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	3364      	adds	r3, #100	; 0x64
 8000be8:	4a29      	ldr	r2, [pc, #164]	; (8000c90 <fsm_manual_run+0x294>)
 8000bea:	6013      	str	r3, [r2, #0]
				if (greenDuration > 9900)
 8000bec:	4b28      	ldr	r3, [pc, #160]	; (8000c90 <fsm_manual_run+0x294>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f242 62ac 	movw	r2, #9900	; 0x26ac
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	dd39      	ble.n	8000c6c <fsm_manual_run+0x270>
				{
					greenDuration = 100;
 8000bf8:	4b25      	ldr	r3, [pc, #148]	; (8000c90 <fsm_manual_run+0x294>)
 8000bfa:	2264      	movs	r2, #100	; 0x64
 8000bfc:	601a      	str	r2, [r3, #0]
				}
			}
			break;
 8000bfe:	e035      	b.n	8000c6c <fsm_manual_run+0x270>
		}
	case ERROR:
		status = RED1_GREEN2;
 8000c00:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <fsm_manual_run+0x278>)
 8000c02:	2202      	movs	r2, #2
 8000c04:	601a      	str	r2, [r3, #0]
		redDuration = tempRed;
 8000c06:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <fsm_manual_run+0x288>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a1c      	ldr	r2, [pc, #112]	; (8000c7c <fsm_manual_run+0x280>)
 8000c0c:	6013      	str	r3, [r2, #0]
		yellowDuration = tempYellow;
 8000c0e:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <fsm_manual_run+0x290>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a1d      	ldr	r2, [pc, #116]	; (8000c88 <fsm_manual_run+0x28c>)
 8000c14:	6013      	str	r3, [r2, #0]
		greenDuration = tempGreen;
 8000c16:	4b1f      	ldr	r3, [pc, #124]	; (8000c94 <fsm_manual_run+0x298>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a1d      	ldr	r2, [pc, #116]	; (8000c90 <fsm_manual_run+0x294>)
 8000c1c:	6013      	str	r3, [r2, #0]
		mode = 1;
 8000c1e:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <fsm_manual_run+0x27c>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	601a      	str	r2, [r3, #0]
		redCounter = redDuration / 100;
 8000c24:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <fsm_manual_run+0x280>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a15      	ldr	r2, [pc, #84]	; (8000c80 <fsm_manual_run+0x284>)
 8000c2a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c2e:	1152      	asrs	r2, r2, #5
 8000c30:	17db      	asrs	r3, r3, #31
 8000c32:	1ad3      	subs	r3, r2, r3
 8000c34:	4a18      	ldr	r2, [pc, #96]	; (8000c98 <fsm_manual_run+0x29c>)
 8000c36:	6013      	str	r3, [r2, #0]
		greenCounter = greenDuration / 100;
 8000c38:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <fsm_manual_run+0x294>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a10      	ldr	r2, [pc, #64]	; (8000c80 <fsm_manual_run+0x284>)
 8000c3e:	fb82 1203 	smull	r1, r2, r2, r3
 8000c42:	1152      	asrs	r2, r2, #5
 8000c44:	17db      	asrs	r3, r3, #31
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	4a14      	ldr	r2, [pc, #80]	; (8000c9c <fsm_manual_run+0x2a0>)
 8000c4a:	6013      	str	r3, [r2, #0]
		yellowCounter = yellowDuration / 100;
 8000c4c:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <fsm_manual_run+0x28c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a0b      	ldr	r2, [pc, #44]	; (8000c80 <fsm_manual_run+0x284>)
 8000c52:	fb82 1203 	smull	r1, r2, r2, r3
 8000c56:	1152      	asrs	r2, r2, #5
 8000c58:	17db      	asrs	r3, r3, #31
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	4a10      	ldr	r2, [pc, #64]	; (8000ca0 <fsm_manual_run+0x2a4>)
 8000c5e:	6013      	str	r3, [r2, #0]
	default:
		break;
 8000c60:	bf00      	nop
 8000c62:	e004      	b.n	8000c6e <fsm_manual_run+0x272>
		break;
 8000c64:	bf00      	nop
 8000c66:	e002      	b.n	8000c6e <fsm_manual_run+0x272>
			break;
 8000c68:	bf00      	nop
 8000c6a:	e000      	b.n	8000c6e <fsm_manual_run+0x272>
			break;
 8000c6c:	bf00      	nop
	}
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000058 	.word	0x20000058
 8000c78:	20000064 	.word	0x20000064
 8000c7c:	20000010 	.word	0x20000010
 8000c80:	51eb851f 	.word	0x51eb851f
 8000c84:	200000b8 	.word	0x200000b8
 8000c88:	20000018 	.word	0x20000018
 8000c8c:	200000bc 	.word	0x200000bc
 8000c90:	20000014 	.word	0x20000014
 8000c94:	200000cc 	.word	0x200000cc
 8000c98:	200000c8 	.word	0x200000c8
 8000c9c:	200000c4 	.word	0x200000c4
 8000ca0:	200000c0 	.word	0x200000c0

08000ca4 <displayLed>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int index_led_7SEG = 0;
void displayLed(){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
	update7SEG(index_led_7SEG++);
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <displayLed+0x28>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	1c5a      	adds	r2, r3, #1
 8000cae:	4907      	ldr	r1, [pc, #28]	; (8000ccc <displayLed+0x28>)
 8000cb0:	600a      	str	r2, [r1, #0]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fbd0 	bl	8000458 <update7SEG>
	if (index_led_7SEG >= 4) index_led_7SEG = 0;
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <displayLed+0x28>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b03      	cmp	r3, #3
 8000cbe:	dd02      	ble.n	8000cc6 <displayLed+0x22>
 8000cc0:	4b02      	ldr	r3, [pc, #8]	; (8000ccc <displayLed+0x28>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000068 	.word	0x20000068

08000cd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd4:	f000 fb66 	bl	80013a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd8:	f000 f828 	bl	8000d2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cdc:	f000 f8ae 	bl	8000e3c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ce0:	f000 f860 	bl	8000da4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000ce4:	480c      	ldr	r0, [pc, #48]	; (8000d18 <main+0x48>)
 8000ce6:	f001 fabb 	bl	8002260 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <main+0x4c>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	601a      	str	r2, [r3, #0]
  SCH_Init();
 8000cf0:	f000 f918 	bl	8000f24 <SCH_Init>
  SCH_Add_Task(fsm_automatic_run,100, 100);
 8000cf4:	2264      	movs	r2, #100	; 0x64
 8000cf6:	2164      	movs	r1, #100	; 0x64
 8000cf8:	4809      	ldr	r0, [pc, #36]	; (8000d20 <main+0x50>)
 8000cfa:	f000 f92d 	bl	8000f58 <SCH_Add_Task>
  SCH_Add_Task(fsm_manual_run,25 , 25);
 8000cfe:	2219      	movs	r2, #25
 8000d00:	2119      	movs	r1, #25
 8000d02:	4808      	ldr	r0, [pc, #32]	; (8000d24 <main+0x54>)
 8000d04:	f000 f928 	bl	8000f58 <SCH_Add_Task>
  SCH_Add_Task(displayLed, 25 , 25);
 8000d08:	2219      	movs	r2, #25
 8000d0a:	2119      	movs	r1, #25
 8000d0c:	4806      	ldr	r0, [pc, #24]	; (8000d28 <main+0x58>)
 8000d0e:	f000 f923 	bl	8000f58 <SCH_Add_Task>
  while (1)
  {
//	 	fsm_automatic_run();
//	 	fsm_manual_run();
	  SCH_Dispatch_Tasks();
 8000d12:	f000 f9d9 	bl	80010c8 <SCH_Dispatch_Tasks>
 8000d16:	e7fc      	b.n	8000d12 <main+0x42>
 8000d18:	200000d0 	.word	0x200000d0
 8000d1c:	20000058 	.word	0x20000058
 8000d20:	0800079d 	.word	0x0800079d
 8000d24:	080009fd 	.word	0x080009fd
 8000d28:	08000ca5 	.word	0x08000ca5

08000d2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b090      	sub	sp, #64	; 0x40
 8000d30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d32:	f107 0318 	add.w	r3, r7, #24
 8000d36:	2228      	movs	r2, #40	; 0x28
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f001 fe40 	bl	80029c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
 8000d4c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d52:	2301      	movs	r3, #1
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d56:	2310      	movs	r3, #16
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d5e:	f107 0318 	add.w	r3, r7, #24
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 fe50 	bl	8001a08 <HAL_RCC_OscConfig>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000d6e:	f000 f8d3 	bl	8000f18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d72:	230f      	movs	r3, #15
 8000d74:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f001 f8bc 	bl	8001f08 <HAL_RCC_ClockConfig>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d96:	f000 f8bf 	bl	8000f18 <Error_Handler>
  }
}
 8000d9a:	bf00      	nop
 8000d9c:	3740      	adds	r7, #64	; 0x40
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
	...

08000da4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000daa:	f107 0308 	add.w	r3, r7, #8
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db8:	463b      	mov	r3, r7
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dc0:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <MX_TIM2_Init+0x94>)
 8000dc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dc6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000dc8:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <MX_TIM2_Init+0x94>)
 8000dca:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000dce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd0:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <MX_TIM2_Init+0x94>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000dd6:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <MX_TIM2_Init+0x94>)
 8000dd8:	2209      	movs	r2, #9
 8000dda:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ddc:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <MX_TIM2_Init+0x94>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <MX_TIM2_Init+0x94>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000de8:	4813      	ldr	r0, [pc, #76]	; (8000e38 <MX_TIM2_Init+0x94>)
 8000dea:	f001 f9e9 	bl	80021c0 <HAL_TIM_Base_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000df4:	f000 f890 	bl	8000f18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000df8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dfc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dfe:	f107 0308 	add.w	r3, r7, #8
 8000e02:	4619      	mov	r1, r3
 8000e04:	480c      	ldr	r0, [pc, #48]	; (8000e38 <MX_TIM2_Init+0x94>)
 8000e06:	f001 fb67 	bl	80024d8 <HAL_TIM_ConfigClockSource>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e10:	f000 f882 	bl	8000f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e14:	2300      	movs	r3, #0
 8000e16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e1c:	463b      	mov	r3, r7
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4805      	ldr	r0, [pc, #20]	; (8000e38 <MX_TIM2_Init+0x94>)
 8000e22:	f001 fd3f 	bl	80028a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e2c:	f000 f874 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	200000d0 	.word	0x200000d0

08000e3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e42:	f107 0308 	add.w	r3, r7, #8
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e50:	4b28      	ldr	r3, [pc, #160]	; (8000ef4 <MX_GPIO_Init+0xb8>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	4a27      	ldr	r2, [pc, #156]	; (8000ef4 <MX_GPIO_Init+0xb8>)
 8000e56:	f043 0304 	orr.w	r3, r3, #4
 8000e5a:	6193      	str	r3, [r2, #24]
 8000e5c:	4b25      	ldr	r3, [pc, #148]	; (8000ef4 <MX_GPIO_Init+0xb8>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	f003 0304 	and.w	r3, r3, #4
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e68:	4b22      	ldr	r3, [pc, #136]	; (8000ef4 <MX_GPIO_Init+0xb8>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	4a21      	ldr	r2, [pc, #132]	; (8000ef4 <MX_GPIO_Init+0xb8>)
 8000e6e:	f043 0308 	orr.w	r3, r3, #8
 8000e72:	6193      	str	r3, [r2, #24]
 8000e74:	4b1f      	ldr	r3, [pc, #124]	; (8000ef4 <MX_GPIO_Init+0xb8>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	f003 0308 	and.w	r3, r3, #8
 8000e7c:	603b      	str	r3, [r7, #0]
 8000e7e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 8000e80:	2200      	movs	r2, #0
 8000e82:	f643 417e 	movw	r1, #15486	; 0x3c7e
 8000e86:	481c      	ldr	r0, [pc, #112]	; (8000ef8 <MX_GPIO_Init+0xbc>)
 8000e88:	f000 fd8d 	bl	80019a6 <HAL_GPIO_WritePin>
                          |YELLOW2_Pin|GREEN2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|d_Pin
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	217f      	movs	r1, #127	; 0x7f
 8000e90:	481a      	ldr	r0, [pc, #104]	; (8000efc <MX_GPIO_Init+0xc0>)
 8000e92:	f000 fd88 	bl	80019a6 <HAL_GPIO_WritePin>
                          |e_Pin|f_Pin|g_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED1_Pin YELLOW1_Pin GREEN1_Pin RED2_Pin
                           YELLOW2_Pin GREEN2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 8000e96:	f643 437e 	movw	r3, #15486	; 0x3c7e
 8000e9a:	60bb      	str	r3, [r7, #8]
                          |YELLOW2_Pin|GREEN2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea8:	f107 0308 	add.w	r3, r7, #8
 8000eac:	4619      	mov	r1, r3
 8000eae:	4812      	ldr	r0, [pc, #72]	; (8000ef8 <MX_GPIO_Init+0xbc>)
 8000eb0:	f000 fbe8 	bl	8001684 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON0_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000eb4:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000eb8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec2:	f107 0308 	add.w	r3, r7, #8
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	480b      	ldr	r0, [pc, #44]	; (8000ef8 <MX_GPIO_Init+0xbc>)
 8000eca:	f000 fbdb 	bl	8001684 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin d_Pin
                           e_Pin f_Pin g_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|d_Pin
 8000ece:	237f      	movs	r3, #127	; 0x7f
 8000ed0:	60bb      	str	r3, [r7, #8]
                          |e_Pin|f_Pin|g_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2302      	movs	r3, #2
 8000edc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ede:	f107 0308 	add.w	r3, r7, #8
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <MX_GPIO_Init+0xc0>)
 8000ee6:	f000 fbcd 	bl	8001684 <HAL_GPIO_Init>

}
 8000eea:	bf00      	nop
 8000eec:	3718      	adds	r7, #24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	40010800 	.word	0x40010800
 8000efc:	40010c00 	.word	0x40010c00

08000f00 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	getKeyInput();
 8000f08:	f7ff f986 	bl	8000218 <getKeyInput>
	SCH_Update();
 8000f0c:	f000 f882 	bl	8001014 <SCH_Update>
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f1c:	b672      	cpsid	i
}
 8000f1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <Error_Handler+0x8>
	...

08000f24 <SCH_Init>:
uint32_t current_idx_task = 0;

sTasks SCH_tasks_G[SCH_MAX_TASKS];

void SCH_Init()
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
	for (int i = 0; i < SCH_MAX_TASKS; i++)
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	e006      	b.n	8000f3e <SCH_Init+0x1a>
	{
		SCH_Delete_Task(i);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 f918 	bl	8001168 <SCH_Delete_Task>
	for (int i = 0; i < SCH_MAX_TASKS; i++)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b09      	cmp	r3, #9
 8000f42:	ddf5      	ble.n	8000f30 <SCH_Init+0xc>
	}
	current_idx_task = 0;
 8000f44:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <SCH_Init+0x30>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	2000006c 	.word	0x2000006c

08000f58 <SCH_Add_Task>:

uint32_t SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
	if(current_idx_task < SCH_MAX_TASKS)
 8000f64:	4b28      	ldr	r3, [pc, #160]	; (8001008 <SCH_Add_Task+0xb0>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b09      	cmp	r3, #9
 8000f6a:	d846      	bhi.n	8000ffa <SCH_Add_Task+0xa2>
	{
		SCH_tasks_G[current_idx_task].pTask = pFunction;
 8000f6c:	4b26      	ldr	r3, [pc, #152]	; (8001008 <SCH_Add_Task+0xb0>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	4926      	ldr	r1, [pc, #152]	; (800100c <SCH_Add_Task+0xb4>)
 8000f72:	4613      	mov	r3, r2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4413      	add	r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	440b      	add	r3, r1
 8000f7c:	68fa      	ldr	r2, [r7, #12]
 8000f7e:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_idx_task].Delay = DELAY / TICK;
 8000f80:	4b23      	ldr	r3, [pc, #140]	; (8001010 <SCH_Add_Task+0xb8>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4619      	mov	r1, r3
 8000f86:	4b20      	ldr	r3, [pc, #128]	; (8001008 <SCH_Add_Task+0xb0>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	fbb3 f1f1 	udiv	r1, r3, r1
 8000f90:	481e      	ldr	r0, [pc, #120]	; (800100c <SCH_Add_Task+0xb4>)
 8000f92:	4613      	mov	r3, r2
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	4413      	add	r3, r2
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	4403      	add	r3, r0
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[current_idx_task].Period = PERIOD / TICK;
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <SCH_Add_Task+0xb8>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4b18      	ldr	r3, [pc, #96]	; (8001008 <SCH_Add_Task+0xb0>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	fbb3 f1f1 	udiv	r1, r3, r1
 8000fb0:	4816      	ldr	r0, [pc, #88]	; (800100c <SCH_Add_Task+0xb4>)
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4403      	add	r3, r0
 8000fbc:	3308      	adds	r3, #8
 8000fbe:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[current_idx_task].RunMe = 0;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <SCH_Add_Task+0xb0>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4911      	ldr	r1, [pc, #68]	; (800100c <SCH_Add_Task+0xb4>)
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	4413      	add	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	440b      	add	r3, r1
 8000fd0:	330c      	adds	r3, #12
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
		SCH_tasks_G[current_idx_task].TaskID = current_idx_task;
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <SCH_Add_Task+0xb0>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <SCH_Add_Task+0xb0>)
 8000fdc:	6819      	ldr	r1, [r3, #0]
 8000fde:	480b      	ldr	r0, [pc, #44]	; (800100c <SCH_Add_Task+0xb4>)
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4403      	add	r3, r0
 8000fea:	3310      	adds	r3, #16
 8000fec:	6019      	str	r1, [r3, #0]

		return current_idx_task++;
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <SCH_Add_Task+0xb0>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	1c5a      	adds	r2, r3, #1
 8000ff4:	4904      	ldr	r1, [pc, #16]	; (8001008 <SCH_Add_Task+0xb0>)
 8000ff6:	600a      	str	r2, [r1, #0]
 8000ff8:	e000      	b.n	8000ffc <SCH_Add_Task+0xa4>
	}
	else return SCH_MAX_TASKS;
 8000ffa:	230a      	movs	r3, #10


}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	2000006c 	.word	0x2000006c
 800100c:	20000118 	.word	0x20000118
 8001010:	2000001c 	.word	0x2000001c

08001014 <SCH_Update>:

void SCH_Update()
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
	for (int i = 0; i < SCH_MAX_TASKS; i++)
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	e048      	b.n	80010b2 <SCH_Update+0x9e>
	{
		if(SCH_tasks_G[i].Delay > 0)
 8001020:	4928      	ldr	r1, [pc, #160]	; (80010c4 <SCH_Update+0xb0>)
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	4613      	mov	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4413      	add	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	440b      	add	r3, r1
 800102e:	3304      	adds	r3, #4
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d013      	beq.n	800105e <SCH_Update+0x4a>
		{
			SCH_tasks_G[i].Delay--;
 8001036:	4923      	ldr	r1, [pc, #140]	; (80010c4 <SCH_Update+0xb0>)
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	4613      	mov	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	440b      	add	r3, r1
 8001044:	3304      	adds	r3, #4
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	1e59      	subs	r1, r3, #1
 800104a:	481e      	ldr	r0, [pc, #120]	; (80010c4 <SCH_Update+0xb0>)
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	4613      	mov	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	4403      	add	r3, r0
 8001058:	3304      	adds	r3, #4
 800105a:	6019      	str	r1, [r3, #0]
 800105c:	e026      	b.n	80010ac <SCH_Update+0x98>
		}
		else
		{
			SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 800105e:	4919      	ldr	r1, [pc, #100]	; (80010c4 <SCH_Update+0xb0>)
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	4613      	mov	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	440b      	add	r3, r1
 800106c:	3308      	adds	r3, #8
 800106e:	6819      	ldr	r1, [r3, #0]
 8001070:	4814      	ldr	r0, [pc, #80]	; (80010c4 <SCH_Update+0xb0>)
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	4613      	mov	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4413      	add	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4403      	add	r3, r0
 800107e:	3304      	adds	r3, #4
 8001080:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe ++;
 8001082:	4910      	ldr	r1, [pc, #64]	; (80010c4 <SCH_Update+0xb0>)
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	4613      	mov	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4413      	add	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	440b      	add	r3, r1
 8001090:	330c      	adds	r3, #12
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	3301      	adds	r3, #1
 8001096:	b2d8      	uxtb	r0, r3
 8001098:	490a      	ldr	r1, [pc, #40]	; (80010c4 <SCH_Update+0xb0>)
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	440b      	add	r3, r1
 80010a6:	330c      	adds	r3, #12
 80010a8:	4602      	mov	r2, r0
 80010aa:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < SCH_MAX_TASKS; i++)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3301      	adds	r3, #1
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b09      	cmp	r3, #9
 80010b6:	ddb3      	ble.n	8001020 <SCH_Update+0xc>
		}
	}
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr
 80010c4:	20000118 	.word	0x20000118

080010c8 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks()
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
	for (int i = 0; i < current_idx_task; i++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	e03a      	b.n	800114a <SCH_Dispatch_Tasks+0x82>
	{
		if(SCH_tasks_G[i].RunMe > 0)
 80010d4:	4922      	ldr	r1, [pc, #136]	; (8001160 <SCH_Dispatch_Tasks+0x98>)
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	4613      	mov	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4413      	add	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	440b      	add	r3, r1
 80010e2:	330c      	adds	r3, #12
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d02c      	beq.n	8001144 <SCH_Dispatch_Tasks+0x7c>
		{
			SCH_tasks_G[i].RunMe--;
 80010ea:	491d      	ldr	r1, [pc, #116]	; (8001160 <SCH_Dispatch_Tasks+0x98>)
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	4613      	mov	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	440b      	add	r3, r1
 80010f8:	330c      	adds	r3, #12
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	3b01      	subs	r3, #1
 80010fe:	b2d8      	uxtb	r0, r3
 8001100:	4917      	ldr	r1, [pc, #92]	; (8001160 <SCH_Dispatch_Tasks+0x98>)
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	4613      	mov	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4413      	add	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	440b      	add	r3, r1
 800110e:	330c      	adds	r3, #12
 8001110:	4602      	mov	r2, r0
 8001112:	701a      	strb	r2, [r3, #0]
			(*SCH_tasks_G[i].pTask)();
 8001114:	4912      	ldr	r1, [pc, #72]	; (8001160 <SCH_Dispatch_Tasks+0x98>)
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	4613      	mov	r3, r2
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	4413      	add	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	440b      	add	r3, r1
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4798      	blx	r3

			if (SCH_tasks_G[i].Period == 0)
 8001126:	490e      	ldr	r1, [pc, #56]	; (8001160 <SCH_Dispatch_Tasks+0x98>)
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	4613      	mov	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4413      	add	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	440b      	add	r3, r1
 8001134:	3308      	adds	r3, #8
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d103      	bne.n	8001144 <SCH_Dispatch_Tasks+0x7c>
			{
				SCH_Delete_Task(i);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4618      	mov	r0, r3
 8001140:	f000 f812 	bl	8001168 <SCH_Delete_Task>
	for (int i = 0; i < current_idx_task; i++)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3301      	adds	r3, #1
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <SCH_Dispatch_Tasks+0x9c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	429a      	cmp	r2, r3
 8001152:	d3bf      	bcc.n	80010d4 <SCH_Dispatch_Tasks+0xc>

		}

	}

}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000118 	.word	0x20000118
 8001164:	2000006c 	.word	0x2000006c

08001168 <SCH_Delete_Task>:


uint8_t SCH_Delete_Task(uint32_t taskID)
{
 8001168:	b4b0      	push	{r4, r5, r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	if (SCH_tasks_G[taskID].pTask != 0)
 8001170:	4930      	ldr	r1, [pc, #192]	; (8001234 <SCH_Delete_Task+0xcc>)
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	4613      	mov	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4413      	add	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	440b      	add	r3, r1
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d051      	beq.n	8001228 <SCH_Delete_Task+0xc0>
	{
		SCH_tasks_G[taskID].pTask = 0x0000 ;
 8001184:	492b      	ldr	r1, [pc, #172]	; (8001234 <SCH_Delete_Task+0xcc>)
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	4613      	mov	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4413      	add	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	440b      	add	r3, r1
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[taskID].Delay = 0;
 8001196:	4927      	ldr	r1, [pc, #156]	; (8001234 <SCH_Delete_Task+0xcc>)
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	4613      	mov	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	440b      	add	r3, r1
 80011a4:	3304      	adds	r3, #4
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[taskID].Period = 0;
 80011aa:	4922      	ldr	r1, [pc, #136]	; (8001234 <SCH_Delete_Task+0xcc>)
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	4613      	mov	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	4413      	add	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	440b      	add	r3, r1
 80011b8:	3308      	adds	r3, #8
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[taskID].RunMe = 0;
 80011be:	491d      	ldr	r1, [pc, #116]	; (8001234 <SCH_Delete_Task+0xcc>)
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	4613      	mov	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	440b      	add	r3, r1
 80011cc:	330c      	adds	r3, #12
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
		for (int i = taskID; i < current_idx_task; i++)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	e020      	b.n	800121a <SCH_Delete_Task+0xb2>
		{
			SCH_tasks_G[i] = SCH_tasks_G[i + 1];
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	1c5a      	adds	r2, r3, #1
 80011dc:	4815      	ldr	r0, [pc, #84]	; (8001234 <SCH_Delete_Task+0xcc>)
 80011de:	68f9      	ldr	r1, [r7, #12]
 80011e0:	460b      	mov	r3, r1
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	440b      	add	r3, r1
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4418      	add	r0, r3
 80011ea:	4912      	ldr	r1, [pc, #72]	; (8001234 <SCH_Delete_Task+0xcc>)
 80011ec:	4613      	mov	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	440b      	add	r3, r1
 80011f6:	4604      	mov	r4, r0
 80011f8:	461d      	mov	r5, r3
 80011fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011fe:	682b      	ldr	r3, [r5, #0]
 8001200:	6023      	str	r3, [r4, #0]
			if (i + 1 == current_idx_task)
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	3301      	adds	r3, #1
 8001206:	4a0c      	ldr	r2, [pc, #48]	; (8001238 <SCH_Delete_Task+0xd0>)
 8001208:	6812      	ldr	r2, [r2, #0]
 800120a:	4293      	cmp	r3, r2
 800120c:	d102      	bne.n	8001214 <SCH_Delete_Task+0xac>
			{
				current_idx_task = i;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4a09      	ldr	r2, [pc, #36]	; (8001238 <SCH_Delete_Task+0xd0>)
 8001212:	6013      	str	r3, [r2, #0]
		for (int i = taskID; i < current_idx_task; i++)
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	3301      	adds	r3, #1
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <SCH_Delete_Task+0xd0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	429a      	cmp	r2, r3
 8001222:	d3d9      	bcc.n	80011d8 <SCH_Delete_Task+0x70>
			}
		}
		return 0;
 8001224:	2300      	movs	r3, #0
 8001226:	e000      	b.n	800122a <SCH_Delete_Task+0xc2>
	}
	else return 1;
 8001228:	2301      	movs	r3, #1


}
 800122a:	4618      	mov	r0, r3
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	bcb0      	pop	{r4, r5, r7}
 8001232:	4770      	bx	lr
 8001234:	20000118 	.word	0x20000118
 8001238:	2000006c 	.word	0x2000006c

0800123c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <HAL_MspInit+0x5c>)
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	4a14      	ldr	r2, [pc, #80]	; (8001298 <HAL_MspInit+0x5c>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6193      	str	r3, [r2, #24]
 800124e:	4b12      	ldr	r3, [pc, #72]	; (8001298 <HAL_MspInit+0x5c>)
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800125a:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <HAL_MspInit+0x5c>)
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	4a0e      	ldr	r2, [pc, #56]	; (8001298 <HAL_MspInit+0x5c>)
 8001260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001264:	61d3      	str	r3, [r2, #28]
 8001266:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <HAL_MspInit+0x5c>)
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <HAL_MspInit+0x60>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	4a04      	ldr	r2, [pc, #16]	; (800129c <HAL_MspInit+0x60>)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128e:	bf00      	nop
 8001290:	3714      	adds	r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr
 8001298:	40021000 	.word	0x40021000
 800129c:	40010000 	.word	0x40010000

080012a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012b0:	d113      	bne.n	80012da <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <HAL_TIM_Base_MspInit+0x44>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	4a0b      	ldr	r2, [pc, #44]	; (80012e4 <HAL_TIM_Base_MspInit+0x44>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	61d3      	str	r3, [r2, #28]
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <HAL_TIM_Base_MspInit+0x44>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2100      	movs	r1, #0
 80012ce:	201c      	movs	r0, #28
 80012d0:	f000 f9a1 	bl	8001616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012d4:	201c      	movs	r0, #28
 80012d6:	f000 f9ba 	bl	800164e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40021000 	.word	0x40021000

080012e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012ec:	e7fe      	b.n	80012ec <NMI_Handler+0x4>

080012ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f2:	e7fe      	b.n	80012f2 <HardFault_Handler+0x4>

080012f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <MemManage_Handler+0x4>

080012fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012fe:	e7fe      	b.n	80012fe <BusFault_Handler+0x4>

08001300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <UsageFault_Handler+0x4>

08001306 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr

08001312 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr

0800131e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr

0800132a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800132e:	f000 f87f 	bl	8001430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800133c:	4802      	ldr	r0, [pc, #8]	; (8001348 <TIM2_IRQHandler+0x10>)
 800133e:	f000 ffdb 	bl	80022f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200000d0 	.word	0x200000d0

0800134c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr

08001358 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001358:	f7ff fff8 	bl	800134c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800135c:	480b      	ldr	r0, [pc, #44]	; (800138c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800135e:	490c      	ldr	r1, [pc, #48]	; (8001390 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001360:	4a0c      	ldr	r2, [pc, #48]	; (8001394 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001364:	e002      	b.n	800136c <LoopCopyDataInit>

08001366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800136a:	3304      	adds	r3, #4

0800136c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800136c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800136e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001370:	d3f9      	bcc.n	8001366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001372:	4a09      	ldr	r2, [pc, #36]	; (8001398 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001374:	4c09      	ldr	r4, [pc, #36]	; (800139c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001378:	e001      	b.n	800137e <LoopFillZerobss>

0800137a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800137a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800137c:	3204      	adds	r2, #4

0800137e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800137e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001380:	d3fb      	bcc.n	800137a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001382:	f001 faf9 	bl	8002978 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001386:	f7ff fca3 	bl	8000cd0 <main>
  bx lr
 800138a:	4770      	bx	lr
  ldr r0, =_sdata
 800138c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001390:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001394:	08002a20 	.word	0x08002a20
  ldr r2, =_sbss
 8001398:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 800139c:	200001e4 	.word	0x200001e4

080013a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013a0:	e7fe      	b.n	80013a0 <ADC1_2_IRQHandler>
	...

080013a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <HAL_Init+0x28>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a07      	ldr	r2, [pc, #28]	; (80013cc <HAL_Init+0x28>)
 80013ae:	f043 0310 	orr.w	r3, r3, #16
 80013b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b4:	2003      	movs	r0, #3
 80013b6:	f000 f923 	bl	8001600 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ba:	200f      	movs	r0, #15
 80013bc:	f000 f808 	bl	80013d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c0:	f7ff ff3c 	bl	800123c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40022000 	.word	0x40022000

080013d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <HAL_InitTick+0x54>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b12      	ldr	r3, [pc, #72]	; (8001428 <HAL_InitTick+0x58>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	4619      	mov	r1, r3
 80013e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 f93b 	bl	800166a <HAL_SYSTICK_Config>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e00e      	b.n	800141c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b0f      	cmp	r3, #15
 8001402:	d80a      	bhi.n	800141a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001404:	2200      	movs	r2, #0
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	f04f 30ff 	mov.w	r0, #4294967295
 800140c:	f000 f903 	bl	8001616 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001410:	4a06      	ldr	r2, [pc, #24]	; (800142c <HAL_InitTick+0x5c>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001416:	2300      	movs	r3, #0
 8001418:	e000      	b.n	800141c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
}
 800141c:	4618      	mov	r0, r3
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000020 	.word	0x20000020
 8001428:	20000028 	.word	0x20000028
 800142c:	20000024 	.word	0x20000024

08001430 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <HAL_IncTick+0x1c>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	461a      	mov	r2, r3
 800143a:	4b05      	ldr	r3, [pc, #20]	; (8001450 <HAL_IncTick+0x20>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4413      	add	r3, r2
 8001440:	4a03      	ldr	r2, [pc, #12]	; (8001450 <HAL_IncTick+0x20>)
 8001442:	6013      	str	r3, [r2, #0]
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	20000028 	.word	0x20000028
 8001450:	200001e0 	.word	0x200001e0

08001454 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return uwTick;
 8001458:	4b02      	ldr	r3, [pc, #8]	; (8001464 <HAL_GetTick+0x10>)
 800145a:	681b      	ldr	r3, [r3, #0]
}
 800145c:	4618      	mov	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	200001e0 	.word	0x200001e0

08001468 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <__NVIC_SetPriorityGrouping+0x44>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001484:	4013      	ands	r3, r2
 8001486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001490:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800149a:	4a04      	ldr	r2, [pc, #16]	; (80014ac <__NVIC_SetPriorityGrouping+0x44>)
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	60d3      	str	r3, [r2, #12]
}
 80014a0:	bf00      	nop
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b4:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <__NVIC_GetPriorityGrouping+0x18>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	0a1b      	lsrs	r3, r3, #8
 80014ba:	f003 0307 	and.w	r3, r3, #7
}
 80014be:	4618      	mov	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	db0b      	blt.n	80014f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	f003 021f 	and.w	r2, r3, #31
 80014e4:	4906      	ldr	r1, [pc, #24]	; (8001500 <__NVIC_EnableIRQ+0x34>)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	095b      	lsrs	r3, r3, #5
 80014ec:	2001      	movs	r0, #1
 80014ee:	fa00 f202 	lsl.w	r2, r0, r2
 80014f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr
 8001500:	e000e100 	.word	0xe000e100

08001504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	6039      	str	r1, [r7, #0]
 800150e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001514:	2b00      	cmp	r3, #0
 8001516:	db0a      	blt.n	800152e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	b2da      	uxtb	r2, r3
 800151c:	490c      	ldr	r1, [pc, #48]	; (8001550 <__NVIC_SetPriority+0x4c>)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	0112      	lsls	r2, r2, #4
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	440b      	add	r3, r1
 8001528:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800152c:	e00a      	b.n	8001544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	b2da      	uxtb	r2, r3
 8001532:	4908      	ldr	r1, [pc, #32]	; (8001554 <__NVIC_SetPriority+0x50>)
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	3b04      	subs	r3, #4
 800153c:	0112      	lsls	r2, r2, #4
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	440b      	add	r3, r1
 8001542:	761a      	strb	r2, [r3, #24]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000e100 	.word	0xe000e100
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001558:	b480      	push	{r7}
 800155a:	b089      	sub	sp, #36	; 0x24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	f1c3 0307 	rsb	r3, r3, #7
 8001572:	2b04      	cmp	r3, #4
 8001574:	bf28      	it	cs
 8001576:	2304      	movcs	r3, #4
 8001578:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3304      	adds	r3, #4
 800157e:	2b06      	cmp	r3, #6
 8001580:	d902      	bls.n	8001588 <NVIC_EncodePriority+0x30>
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3b03      	subs	r3, #3
 8001586:	e000      	b.n	800158a <NVIC_EncodePriority+0x32>
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158c:	f04f 32ff 	mov.w	r2, #4294967295
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43da      	mvns	r2, r3
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	401a      	ands	r2, r3
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a0:	f04f 31ff 	mov.w	r1, #4294967295
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	fa01 f303 	lsl.w	r3, r1, r3
 80015aa:	43d9      	mvns	r1, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	4313      	orrs	r3, r2
         );
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3724      	adds	r7, #36	; 0x24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr

080015bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015cc:	d301      	bcc.n	80015d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ce:	2301      	movs	r3, #1
 80015d0:	e00f      	b.n	80015f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015d2:	4a0a      	ldr	r2, [pc, #40]	; (80015fc <SysTick_Config+0x40>)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015da:	210f      	movs	r1, #15
 80015dc:	f04f 30ff 	mov.w	r0, #4294967295
 80015e0:	f7ff ff90 	bl	8001504 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e4:	4b05      	ldr	r3, [pc, #20]	; (80015fc <SysTick_Config+0x40>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ea:	4b04      	ldr	r3, [pc, #16]	; (80015fc <SysTick_Config+0x40>)
 80015ec:	2207      	movs	r2, #7
 80015ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	e000e010 	.word	0xe000e010

08001600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff ff2d 	bl	8001468 <__NVIC_SetPriorityGrouping>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001616:	b580      	push	{r7, lr}
 8001618:	b086      	sub	sp, #24
 800161a:	af00      	add	r7, sp, #0
 800161c:	4603      	mov	r3, r0
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	607a      	str	r2, [r7, #4]
 8001622:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001628:	f7ff ff42 	bl	80014b0 <__NVIC_GetPriorityGrouping>
 800162c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	68b9      	ldr	r1, [r7, #8]
 8001632:	6978      	ldr	r0, [r7, #20]
 8001634:	f7ff ff90 	bl	8001558 <NVIC_EncodePriority>
 8001638:	4602      	mov	r2, r0
 800163a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163e:	4611      	mov	r1, r2
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff5f 	bl	8001504 <__NVIC_SetPriority>
}
 8001646:	bf00      	nop
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	4603      	mov	r3, r0
 8001656:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ff35 	bl	80014cc <__NVIC_EnableIRQ>
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff ffa2 	bl	80015bc <SysTick_Config>
 8001678:	4603      	mov	r3, r0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001684:	b480      	push	{r7}
 8001686:	b08b      	sub	sp, #44	; 0x2c
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800168e:	2300      	movs	r3, #0
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001692:	2300      	movs	r3, #0
 8001694:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001696:	e148      	b.n	800192a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001698:	2201      	movs	r2, #1
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	69fa      	ldr	r2, [r7, #28]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	f040 8137 	bne.w	8001924 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	4aa3      	ldr	r2, [pc, #652]	; (8001948 <HAL_GPIO_Init+0x2c4>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d05e      	beq.n	800177e <HAL_GPIO_Init+0xfa>
 80016c0:	4aa1      	ldr	r2, [pc, #644]	; (8001948 <HAL_GPIO_Init+0x2c4>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d875      	bhi.n	80017b2 <HAL_GPIO_Init+0x12e>
 80016c6:	4aa1      	ldr	r2, [pc, #644]	; (800194c <HAL_GPIO_Init+0x2c8>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d058      	beq.n	800177e <HAL_GPIO_Init+0xfa>
 80016cc:	4a9f      	ldr	r2, [pc, #636]	; (800194c <HAL_GPIO_Init+0x2c8>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d86f      	bhi.n	80017b2 <HAL_GPIO_Init+0x12e>
 80016d2:	4a9f      	ldr	r2, [pc, #636]	; (8001950 <HAL_GPIO_Init+0x2cc>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d052      	beq.n	800177e <HAL_GPIO_Init+0xfa>
 80016d8:	4a9d      	ldr	r2, [pc, #628]	; (8001950 <HAL_GPIO_Init+0x2cc>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d869      	bhi.n	80017b2 <HAL_GPIO_Init+0x12e>
 80016de:	4a9d      	ldr	r2, [pc, #628]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d04c      	beq.n	800177e <HAL_GPIO_Init+0xfa>
 80016e4:	4a9b      	ldr	r2, [pc, #620]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d863      	bhi.n	80017b2 <HAL_GPIO_Init+0x12e>
 80016ea:	4a9b      	ldr	r2, [pc, #620]	; (8001958 <HAL_GPIO_Init+0x2d4>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d046      	beq.n	800177e <HAL_GPIO_Init+0xfa>
 80016f0:	4a99      	ldr	r2, [pc, #612]	; (8001958 <HAL_GPIO_Init+0x2d4>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d85d      	bhi.n	80017b2 <HAL_GPIO_Init+0x12e>
 80016f6:	2b12      	cmp	r3, #18
 80016f8:	d82a      	bhi.n	8001750 <HAL_GPIO_Init+0xcc>
 80016fa:	2b12      	cmp	r3, #18
 80016fc:	d859      	bhi.n	80017b2 <HAL_GPIO_Init+0x12e>
 80016fe:	a201      	add	r2, pc, #4	; (adr r2, 8001704 <HAL_GPIO_Init+0x80>)
 8001700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001704:	0800177f 	.word	0x0800177f
 8001708:	08001759 	.word	0x08001759
 800170c:	0800176b 	.word	0x0800176b
 8001710:	080017ad 	.word	0x080017ad
 8001714:	080017b3 	.word	0x080017b3
 8001718:	080017b3 	.word	0x080017b3
 800171c:	080017b3 	.word	0x080017b3
 8001720:	080017b3 	.word	0x080017b3
 8001724:	080017b3 	.word	0x080017b3
 8001728:	080017b3 	.word	0x080017b3
 800172c:	080017b3 	.word	0x080017b3
 8001730:	080017b3 	.word	0x080017b3
 8001734:	080017b3 	.word	0x080017b3
 8001738:	080017b3 	.word	0x080017b3
 800173c:	080017b3 	.word	0x080017b3
 8001740:	080017b3 	.word	0x080017b3
 8001744:	080017b3 	.word	0x080017b3
 8001748:	08001761 	.word	0x08001761
 800174c:	08001775 	.word	0x08001775
 8001750:	4a82      	ldr	r2, [pc, #520]	; (800195c <HAL_GPIO_Init+0x2d8>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d013      	beq.n	800177e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001756:	e02c      	b.n	80017b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	623b      	str	r3, [r7, #32]
          break;
 800175e:	e029      	b.n	80017b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	3304      	adds	r3, #4
 8001766:	623b      	str	r3, [r7, #32]
          break;
 8001768:	e024      	b.n	80017b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	3308      	adds	r3, #8
 8001770:	623b      	str	r3, [r7, #32]
          break;
 8001772:	e01f      	b.n	80017b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	330c      	adds	r3, #12
 800177a:	623b      	str	r3, [r7, #32]
          break;
 800177c:	e01a      	b.n	80017b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d102      	bne.n	800178c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001786:	2304      	movs	r3, #4
 8001788:	623b      	str	r3, [r7, #32]
          break;
 800178a:	e013      	b.n	80017b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d105      	bne.n	80017a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001794:	2308      	movs	r3, #8
 8001796:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69fa      	ldr	r2, [r7, #28]
 800179c:	611a      	str	r2, [r3, #16]
          break;
 800179e:	e009      	b.n	80017b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017a0:	2308      	movs	r3, #8
 80017a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69fa      	ldr	r2, [r7, #28]
 80017a8:	615a      	str	r2, [r3, #20]
          break;
 80017aa:	e003      	b.n	80017b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017ac:	2300      	movs	r3, #0
 80017ae:	623b      	str	r3, [r7, #32]
          break;
 80017b0:	e000      	b.n	80017b4 <HAL_GPIO_Init+0x130>
          break;
 80017b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	2bff      	cmp	r3, #255	; 0xff
 80017b8:	d801      	bhi.n	80017be <HAL_GPIO_Init+0x13a>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	e001      	b.n	80017c2 <HAL_GPIO_Init+0x13e>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3304      	adds	r3, #4
 80017c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	2bff      	cmp	r3, #255	; 0xff
 80017c8:	d802      	bhi.n	80017d0 <HAL_GPIO_Init+0x14c>
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	e002      	b.n	80017d6 <HAL_GPIO_Init+0x152>
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	3b08      	subs	r3, #8
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	210f      	movs	r1, #15
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	fa01 f303 	lsl.w	r3, r1, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	401a      	ands	r2, r3
 80017e8:	6a39      	ldr	r1, [r7, #32]
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	fa01 f303 	lsl.w	r3, r1, r3
 80017f0:	431a      	orrs	r2, r3
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f000 8090 	beq.w	8001924 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001804:	4b56      	ldr	r3, [pc, #344]	; (8001960 <HAL_GPIO_Init+0x2dc>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	4a55      	ldr	r2, [pc, #340]	; (8001960 <HAL_GPIO_Init+0x2dc>)
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	6193      	str	r3, [r2, #24]
 8001810:	4b53      	ldr	r3, [pc, #332]	; (8001960 <HAL_GPIO_Init+0x2dc>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800181c:	4a51      	ldr	r2, [pc, #324]	; (8001964 <HAL_GPIO_Init+0x2e0>)
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	089b      	lsrs	r3, r3, #2
 8001822:	3302      	adds	r3, #2
 8001824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001828:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	220f      	movs	r2, #15
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	4013      	ands	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a49      	ldr	r2, [pc, #292]	; (8001968 <HAL_GPIO_Init+0x2e4>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d00d      	beq.n	8001864 <HAL_GPIO_Init+0x1e0>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a48      	ldr	r2, [pc, #288]	; (800196c <HAL_GPIO_Init+0x2e8>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d007      	beq.n	8001860 <HAL_GPIO_Init+0x1dc>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a47      	ldr	r2, [pc, #284]	; (8001970 <HAL_GPIO_Init+0x2ec>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d101      	bne.n	800185c <HAL_GPIO_Init+0x1d8>
 8001858:	2302      	movs	r3, #2
 800185a:	e004      	b.n	8001866 <HAL_GPIO_Init+0x1e2>
 800185c:	2303      	movs	r3, #3
 800185e:	e002      	b.n	8001866 <HAL_GPIO_Init+0x1e2>
 8001860:	2301      	movs	r3, #1
 8001862:	e000      	b.n	8001866 <HAL_GPIO_Init+0x1e2>
 8001864:	2300      	movs	r3, #0
 8001866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001868:	f002 0203 	and.w	r2, r2, #3
 800186c:	0092      	lsls	r2, r2, #2
 800186e:	4093      	lsls	r3, r2
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	4313      	orrs	r3, r2
 8001874:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001876:	493b      	ldr	r1, [pc, #236]	; (8001964 <HAL_GPIO_Init+0x2e0>)
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	089b      	lsrs	r3, r3, #2
 800187c:	3302      	adds	r3, #2
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d006      	beq.n	800189e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001890:	4b38      	ldr	r3, [pc, #224]	; (8001974 <HAL_GPIO_Init+0x2f0>)
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	4937      	ldr	r1, [pc, #220]	; (8001974 <HAL_GPIO_Init+0x2f0>)
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	4313      	orrs	r3, r2
 800189a:	608b      	str	r3, [r1, #8]
 800189c:	e006      	b.n	80018ac <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800189e:	4b35      	ldr	r3, [pc, #212]	; (8001974 <HAL_GPIO_Init+0x2f0>)
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	43db      	mvns	r3, r3
 80018a6:	4933      	ldr	r1, [pc, #204]	; (8001974 <HAL_GPIO_Init+0x2f0>)
 80018a8:	4013      	ands	r3, r2
 80018aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d006      	beq.n	80018c6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018b8:	4b2e      	ldr	r3, [pc, #184]	; (8001974 <HAL_GPIO_Init+0x2f0>)
 80018ba:	68da      	ldr	r2, [r3, #12]
 80018bc:	492d      	ldr	r1, [pc, #180]	; (8001974 <HAL_GPIO_Init+0x2f0>)
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	60cb      	str	r3, [r1, #12]
 80018c4:	e006      	b.n	80018d4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018c6:	4b2b      	ldr	r3, [pc, #172]	; (8001974 <HAL_GPIO_Init+0x2f0>)
 80018c8:	68da      	ldr	r2, [r3, #12]
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	4929      	ldr	r1, [pc, #164]	; (8001974 <HAL_GPIO_Init+0x2f0>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d006      	beq.n	80018ee <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018e0:	4b24      	ldr	r3, [pc, #144]	; (8001974 <HAL_GPIO_Init+0x2f0>)
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	4923      	ldr	r1, [pc, #140]	; (8001974 <HAL_GPIO_Init+0x2f0>)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	604b      	str	r3, [r1, #4]
 80018ec:	e006      	b.n	80018fc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018ee:	4b21      	ldr	r3, [pc, #132]	; (8001974 <HAL_GPIO_Init+0x2f0>)
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	43db      	mvns	r3, r3
 80018f6:	491f      	ldr	r1, [pc, #124]	; (8001974 <HAL_GPIO_Init+0x2f0>)
 80018f8:	4013      	ands	r3, r2
 80018fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d006      	beq.n	8001916 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001908:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <HAL_GPIO_Init+0x2f0>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4919      	ldr	r1, [pc, #100]	; (8001974 <HAL_GPIO_Init+0x2f0>)
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	4313      	orrs	r3, r2
 8001912:	600b      	str	r3, [r1, #0]
 8001914:	e006      	b.n	8001924 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001916:	4b17      	ldr	r3, [pc, #92]	; (8001974 <HAL_GPIO_Init+0x2f0>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	43db      	mvns	r3, r3
 800191e:	4915      	ldr	r1, [pc, #84]	; (8001974 <HAL_GPIO_Init+0x2f0>)
 8001920:	4013      	ands	r3, r2
 8001922:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	3301      	adds	r3, #1
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	fa22 f303 	lsr.w	r3, r2, r3
 8001934:	2b00      	cmp	r3, #0
 8001936:	f47f aeaf 	bne.w	8001698 <HAL_GPIO_Init+0x14>
  }
}
 800193a:	bf00      	nop
 800193c:	bf00      	nop
 800193e:	372c      	adds	r7, #44	; 0x2c
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	10320000 	.word	0x10320000
 800194c:	10310000 	.word	0x10310000
 8001950:	10220000 	.word	0x10220000
 8001954:	10210000 	.word	0x10210000
 8001958:	10120000 	.word	0x10120000
 800195c:	10110000 	.word	0x10110000
 8001960:	40021000 	.word	0x40021000
 8001964:	40010000 	.word	0x40010000
 8001968:	40010800 	.word	0x40010800
 800196c:	40010c00 	.word	0x40010c00
 8001970:	40011000 	.word	0x40011000
 8001974:	40010400 	.word	0x40010400

08001978 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	887b      	ldrh	r3, [r7, #2]
 800198a:	4013      	ands	r3, r2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d002      	beq.n	8001996 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001990:	2301      	movs	r3, #1
 8001992:	73fb      	strb	r3, [r7, #15]
 8001994:	e001      	b.n	800199a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001996:	2300      	movs	r3, #0
 8001998:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800199a:	7bfb      	ldrb	r3, [r7, #15]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr

080019a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	460b      	mov	r3, r1
 80019b0:	807b      	strh	r3, [r7, #2]
 80019b2:	4613      	mov	r3, r2
 80019b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019b6:	787b      	ldrb	r3, [r7, #1]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019bc:	887a      	ldrh	r2, [r7, #2]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019c2:	e003      	b.n	80019cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019c4:	887b      	ldrh	r3, [r7, #2]
 80019c6:	041a      	lsls	r2, r3, #16
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	611a      	str	r2, [r3, #16]
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr

080019d6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b085      	sub	sp, #20
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	460b      	mov	r3, r1
 80019e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019e8:	887a      	ldrh	r2, [r7, #2]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	4013      	ands	r3, r2
 80019ee:	041a      	lsls	r2, r3, #16
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	43d9      	mvns	r1, r3
 80019f4:	887b      	ldrh	r3, [r7, #2]
 80019f6:	400b      	ands	r3, r1
 80019f8:	431a      	orrs	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	611a      	str	r2, [r3, #16]
}
 80019fe:	bf00      	nop
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr

08001a08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e26c      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 8087 	beq.w	8001b36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a28:	4b92      	ldr	r3, [pc, #584]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 030c 	and.w	r3, r3, #12
 8001a30:	2b04      	cmp	r3, #4
 8001a32:	d00c      	beq.n	8001a4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a34:	4b8f      	ldr	r3, [pc, #572]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 030c 	and.w	r3, r3, #12
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	d112      	bne.n	8001a66 <HAL_RCC_OscConfig+0x5e>
 8001a40:	4b8c      	ldr	r3, [pc, #560]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a4c:	d10b      	bne.n	8001a66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a4e:	4b89      	ldr	r3, [pc, #548]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d06c      	beq.n	8001b34 <HAL_RCC_OscConfig+0x12c>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d168      	bne.n	8001b34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e246      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a6e:	d106      	bne.n	8001a7e <HAL_RCC_OscConfig+0x76>
 8001a70:	4b80      	ldr	r3, [pc, #512]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a7f      	ldr	r2, [pc, #508]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	e02e      	b.n	8001adc <HAL_RCC_OscConfig+0xd4>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10c      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x98>
 8001a86:	4b7b      	ldr	r3, [pc, #492]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a7a      	ldr	r2, [pc, #488]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	4b78      	ldr	r3, [pc, #480]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a77      	ldr	r2, [pc, #476]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a9c:	6013      	str	r3, [r2, #0]
 8001a9e:	e01d      	b.n	8001adc <HAL_RCC_OscConfig+0xd4>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aa8:	d10c      	bne.n	8001ac4 <HAL_RCC_OscConfig+0xbc>
 8001aaa:	4b72      	ldr	r3, [pc, #456]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a71      	ldr	r2, [pc, #452]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	4b6f      	ldr	r3, [pc, #444]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a6e      	ldr	r2, [pc, #440]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	e00b      	b.n	8001adc <HAL_RCC_OscConfig+0xd4>
 8001ac4:	4b6b      	ldr	r3, [pc, #428]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a6a      	ldr	r2, [pc, #424]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	4b68      	ldr	r3, [pc, #416]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a67      	ldr	r2, [pc, #412]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ada:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d013      	beq.n	8001b0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae4:	f7ff fcb6 	bl	8001454 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aec:	f7ff fcb2 	bl	8001454 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b64      	cmp	r3, #100	; 0x64
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e1fa      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afe:	4b5d      	ldr	r3, [pc, #372]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0f0      	beq.n	8001aec <HAL_RCC_OscConfig+0xe4>
 8001b0a:	e014      	b.n	8001b36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0c:	f7ff fca2 	bl	8001454 <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b14:	f7ff fc9e 	bl	8001454 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b64      	cmp	r3, #100	; 0x64
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e1e6      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b26:	4b53      	ldr	r3, [pc, #332]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f0      	bne.n	8001b14 <HAL_RCC_OscConfig+0x10c>
 8001b32:	e000      	b.n	8001b36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d063      	beq.n	8001c0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b42:	4b4c      	ldr	r3, [pc, #304]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 030c 	and.w	r3, r3, #12
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00b      	beq.n	8001b66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b4e:	4b49      	ldr	r3, [pc, #292]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 030c 	and.w	r3, r3, #12
 8001b56:	2b08      	cmp	r3, #8
 8001b58:	d11c      	bne.n	8001b94 <HAL_RCC_OscConfig+0x18c>
 8001b5a:	4b46      	ldr	r3, [pc, #280]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d116      	bne.n	8001b94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b66:	4b43      	ldr	r3, [pc, #268]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d005      	beq.n	8001b7e <HAL_RCC_OscConfig+0x176>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d001      	beq.n	8001b7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e1ba      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b7e:	4b3d      	ldr	r3, [pc, #244]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	4939      	ldr	r1, [pc, #228]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b92:	e03a      	b.n	8001c0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d020      	beq.n	8001bde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b9c:	4b36      	ldr	r3, [pc, #216]	; (8001c78 <HAL_RCC_OscConfig+0x270>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba2:	f7ff fc57 	bl	8001454 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001baa:	f7ff fc53 	bl	8001454 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e19b      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bbc:	4b2d      	ldr	r3, [pc, #180]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0f0      	beq.n	8001baa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc8:	4b2a      	ldr	r3, [pc, #168]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	4927      	ldr	r1, [pc, #156]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	600b      	str	r3, [r1, #0]
 8001bdc:	e015      	b.n	8001c0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bde:	4b26      	ldr	r3, [pc, #152]	; (8001c78 <HAL_RCC_OscConfig+0x270>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be4:	f7ff fc36 	bl	8001454 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bec:	f7ff fc32 	bl	8001454 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e17a      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfe:	4b1d      	ldr	r3, [pc, #116]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f0      	bne.n	8001bec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d03a      	beq.n	8001c8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d019      	beq.n	8001c52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c1e:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c24:	f7ff fc16 	bl	8001454 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c2c:	f7ff fc12 	bl	8001454 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e15a      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c3e:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0f0      	beq.n	8001c2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c4a:	2001      	movs	r0, #1
 8001c4c:	f000 fa9a 	bl	8002184 <RCC_Delay>
 8001c50:	e01c      	b.n	8001c8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c58:	f7ff fbfc 	bl	8001454 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c5e:	e00f      	b.n	8001c80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c60:	f7ff fbf8 	bl	8001454 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d908      	bls.n	8001c80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e140      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4ec>
 8001c72:	bf00      	nop
 8001c74:	40021000 	.word	0x40021000
 8001c78:	42420000 	.word	0x42420000
 8001c7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c80:	4b9e      	ldr	r3, [pc, #632]	; (8001efc <HAL_RCC_OscConfig+0x4f4>)
 8001c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1e9      	bne.n	8001c60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 80a6 	beq.w	8001de6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c9e:	4b97      	ldr	r3, [pc, #604]	; (8001efc <HAL_RCC_OscConfig+0x4f4>)
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10d      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001caa:	4b94      	ldr	r3, [pc, #592]	; (8001efc <HAL_RCC_OscConfig+0x4f4>)
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	4a93      	ldr	r2, [pc, #588]	; (8001efc <HAL_RCC_OscConfig+0x4f4>)
 8001cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb4:	61d3      	str	r3, [r2, #28]
 8001cb6:	4b91      	ldr	r3, [pc, #580]	; (8001efc <HAL_RCC_OscConfig+0x4f4>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc6:	4b8e      	ldr	r3, [pc, #568]	; (8001f00 <HAL_RCC_OscConfig+0x4f8>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d118      	bne.n	8001d04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cd2:	4b8b      	ldr	r3, [pc, #556]	; (8001f00 <HAL_RCC_OscConfig+0x4f8>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a8a      	ldr	r2, [pc, #552]	; (8001f00 <HAL_RCC_OscConfig+0x4f8>)
 8001cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cde:	f7ff fbb9 	bl	8001454 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ce6:	f7ff fbb5 	bl	8001454 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b64      	cmp	r3, #100	; 0x64
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e0fd      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf8:	4b81      	ldr	r3, [pc, #516]	; (8001f00 <HAL_RCC_OscConfig+0x4f8>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0f0      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d106      	bne.n	8001d1a <HAL_RCC_OscConfig+0x312>
 8001d0c:	4b7b      	ldr	r3, [pc, #492]	; (8001efc <HAL_RCC_OscConfig+0x4f4>)
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	4a7a      	ldr	r2, [pc, #488]	; (8001efc <HAL_RCC_OscConfig+0x4f4>)
 8001d12:	f043 0301 	orr.w	r3, r3, #1
 8001d16:	6213      	str	r3, [r2, #32]
 8001d18:	e02d      	b.n	8001d76 <HAL_RCC_OscConfig+0x36e>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10c      	bne.n	8001d3c <HAL_RCC_OscConfig+0x334>
 8001d22:	4b76      	ldr	r3, [pc, #472]	; (8001efc <HAL_RCC_OscConfig+0x4f4>)
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	4a75      	ldr	r2, [pc, #468]	; (8001efc <HAL_RCC_OscConfig+0x4f4>)
 8001d28:	f023 0301 	bic.w	r3, r3, #1
 8001d2c:	6213      	str	r3, [r2, #32]
 8001d2e:	4b73      	ldr	r3, [pc, #460]	; (8001efc <HAL_RCC_OscConfig+0x4f4>)
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	4a72      	ldr	r2, [pc, #456]	; (8001efc <HAL_RCC_OscConfig+0x4f4>)
 8001d34:	f023 0304 	bic.w	r3, r3, #4
 8001d38:	6213      	str	r3, [r2, #32]
 8001d3a:	e01c      	b.n	8001d76 <HAL_RCC_OscConfig+0x36e>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	2b05      	cmp	r3, #5
 8001d42:	d10c      	bne.n	8001d5e <HAL_RCC_OscConfig+0x356>
 8001d44:	4b6d      	ldr	r3, [pc, #436]	; (8001efc <HAL_RCC_OscConfig+0x4f4>)
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	4a6c      	ldr	r2, [pc, #432]	; (8001efc <HAL_RCC_OscConfig+0x4f4>)
 8001d4a:	f043 0304 	orr.w	r3, r3, #4
 8001d4e:	6213      	str	r3, [r2, #32]
 8001d50:	4b6a      	ldr	r3, [pc, #424]	; (8001efc <HAL_RCC_OscConfig+0x4f4>)
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	4a69      	ldr	r2, [pc, #420]	; (8001efc <HAL_RCC_OscConfig+0x4f4>)
 8001d56:	f043 0301 	orr.w	r3, r3, #1
 8001d5a:	6213      	str	r3, [r2, #32]
 8001d5c:	e00b      	b.n	8001d76 <HAL_RCC_OscConfig+0x36e>
 8001d5e:	4b67      	ldr	r3, [pc, #412]	; (8001efc <HAL_RCC_OscConfig+0x4f4>)
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	4a66      	ldr	r2, [pc, #408]	; (8001efc <HAL_RCC_OscConfig+0x4f4>)
 8001d64:	f023 0301 	bic.w	r3, r3, #1
 8001d68:	6213      	str	r3, [r2, #32]
 8001d6a:	4b64      	ldr	r3, [pc, #400]	; (8001efc <HAL_RCC_OscConfig+0x4f4>)
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	4a63      	ldr	r2, [pc, #396]	; (8001efc <HAL_RCC_OscConfig+0x4f4>)
 8001d70:	f023 0304 	bic.w	r3, r3, #4
 8001d74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d015      	beq.n	8001daa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d7e:	f7ff fb69 	bl	8001454 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d84:	e00a      	b.n	8001d9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d86:	f7ff fb65 	bl	8001454 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e0ab      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d9c:	4b57      	ldr	r3, [pc, #348]	; (8001efc <HAL_RCC_OscConfig+0x4f4>)
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d0ee      	beq.n	8001d86 <HAL_RCC_OscConfig+0x37e>
 8001da8:	e014      	b.n	8001dd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001daa:	f7ff fb53 	bl	8001454 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001db0:	e00a      	b.n	8001dc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001db2:	f7ff fb4f 	bl	8001454 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e095      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc8:	4b4c      	ldr	r3, [pc, #304]	; (8001efc <HAL_RCC_OscConfig+0x4f4>)
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1ee      	bne.n	8001db2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dd4:	7dfb      	ldrb	r3, [r7, #23]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d105      	bne.n	8001de6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dda:	4b48      	ldr	r3, [pc, #288]	; (8001efc <HAL_RCC_OscConfig+0x4f4>)
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	4a47      	ldr	r2, [pc, #284]	; (8001efc <HAL_RCC_OscConfig+0x4f4>)
 8001de0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001de4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 8081 	beq.w	8001ef2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001df0:	4b42      	ldr	r3, [pc, #264]	; (8001efc <HAL_RCC_OscConfig+0x4f4>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 030c 	and.w	r3, r3, #12
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d061      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d146      	bne.n	8001e92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e04:	4b3f      	ldr	r3, [pc, #252]	; (8001f04 <HAL_RCC_OscConfig+0x4fc>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0a:	f7ff fb23 	bl	8001454 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e12:	f7ff fb1f 	bl	8001454 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e067      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e24:	4b35      	ldr	r3, [pc, #212]	; (8001efc <HAL_RCC_OscConfig+0x4f4>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1f0      	bne.n	8001e12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e38:	d108      	bne.n	8001e4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e3a:	4b30      	ldr	r3, [pc, #192]	; (8001efc <HAL_RCC_OscConfig+0x4f4>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	492d      	ldr	r1, [pc, #180]	; (8001efc <HAL_RCC_OscConfig+0x4f4>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e4c:	4b2b      	ldr	r3, [pc, #172]	; (8001efc <HAL_RCC_OscConfig+0x4f4>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a19      	ldr	r1, [r3, #32]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	430b      	orrs	r3, r1
 8001e5e:	4927      	ldr	r1, [pc, #156]	; (8001efc <HAL_RCC_OscConfig+0x4f4>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e64:	4b27      	ldr	r3, [pc, #156]	; (8001f04 <HAL_RCC_OscConfig+0x4fc>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6a:	f7ff faf3 	bl	8001454 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e72:	f7ff faef 	bl	8001454 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e037      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e84:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <HAL_RCC_OscConfig+0x4f4>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0f0      	beq.n	8001e72 <HAL_RCC_OscConfig+0x46a>
 8001e90:	e02f      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e92:	4b1c      	ldr	r3, [pc, #112]	; (8001f04 <HAL_RCC_OscConfig+0x4fc>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e98:	f7ff fadc 	bl	8001454 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea0:	f7ff fad8 	bl	8001454 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e020      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb2:	4b12      	ldr	r3, [pc, #72]	; (8001efc <HAL_RCC_OscConfig+0x4f4>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f0      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x498>
 8001ebe:	e018      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69db      	ldr	r3, [r3, #28]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d101      	bne.n	8001ecc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e013      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <HAL_RCC_OscConfig+0x4f4>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d106      	bne.n	8001eee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d001      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40021000 	.word	0x40021000
 8001f00:	40007000 	.word	0x40007000
 8001f04:	42420060 	.word	0x42420060

08001f08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e0d0      	b.n	80020be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f1c:	4b6a      	ldr	r3, [pc, #424]	; (80020c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d910      	bls.n	8001f4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2a:	4b67      	ldr	r3, [pc, #412]	; (80020c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f023 0207 	bic.w	r2, r3, #7
 8001f32:	4965      	ldr	r1, [pc, #404]	; (80020c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3a:	4b63      	ldr	r3, [pc, #396]	; (80020c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d001      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e0b8      	b.n	80020be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d020      	beq.n	8001f9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d005      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f64:	4b59      	ldr	r3, [pc, #356]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	4a58      	ldr	r2, [pc, #352]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8001f6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0308 	and.w	r3, r3, #8
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d005      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f7c:	4b53      	ldr	r3, [pc, #332]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	4a52      	ldr	r2, [pc, #328]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8001f82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f88:	4b50      	ldr	r3, [pc, #320]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	494d      	ldr	r1, [pc, #308]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d040      	beq.n	8002028 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d107      	bne.n	8001fbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fae:	4b47      	ldr	r3, [pc, #284]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d115      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e07f      	b.n	80020be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d107      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fc6:	4b41      	ldr	r3, [pc, #260]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d109      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e073      	b.n	80020be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd6:	4b3d      	ldr	r3, [pc, #244]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e06b      	b.n	80020be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fe6:	4b39      	ldr	r3, [pc, #228]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f023 0203 	bic.w	r2, r3, #3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	4936      	ldr	r1, [pc, #216]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ff8:	f7ff fa2c 	bl	8001454 <HAL_GetTick>
 8001ffc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffe:	e00a      	b.n	8002016 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002000:	f7ff fa28 	bl	8001454 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	f241 3288 	movw	r2, #5000	; 0x1388
 800200e:	4293      	cmp	r3, r2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e053      	b.n	80020be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002016:	4b2d      	ldr	r3, [pc, #180]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 020c 	and.w	r2, r3, #12
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	429a      	cmp	r2, r3
 8002026:	d1eb      	bne.n	8002000 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002028:	4b27      	ldr	r3, [pc, #156]	; (80020c8 <HAL_RCC_ClockConfig+0x1c0>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	429a      	cmp	r2, r3
 8002034:	d210      	bcs.n	8002058 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002036:	4b24      	ldr	r3, [pc, #144]	; (80020c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f023 0207 	bic.w	r2, r3, #7
 800203e:	4922      	ldr	r1, [pc, #136]	; (80020c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	4313      	orrs	r3, r2
 8002044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002046:	4b20      	ldr	r3, [pc, #128]	; (80020c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	429a      	cmp	r2, r3
 8002052:	d001      	beq.n	8002058 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e032      	b.n	80020be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b00      	cmp	r3, #0
 8002062:	d008      	beq.n	8002076 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002064:	4b19      	ldr	r3, [pc, #100]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	4916      	ldr	r1, [pc, #88]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8002072:	4313      	orrs	r3, r2
 8002074:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0308 	and.w	r3, r3, #8
 800207e:	2b00      	cmp	r3, #0
 8002080:	d009      	beq.n	8002096 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002082:	4b12      	ldr	r3, [pc, #72]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	490e      	ldr	r1, [pc, #56]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8002092:	4313      	orrs	r3, r2
 8002094:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002096:	f000 f821 	bl	80020dc <HAL_RCC_GetSysClockFreq>
 800209a:	4602      	mov	r2, r0
 800209c:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	091b      	lsrs	r3, r3, #4
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	490a      	ldr	r1, [pc, #40]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 80020a8:	5ccb      	ldrb	r3, [r1, r3]
 80020aa:	fa22 f303 	lsr.w	r3, r2, r3
 80020ae:	4a09      	ldr	r2, [pc, #36]	; (80020d4 <HAL_RCC_ClockConfig+0x1cc>)
 80020b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020b2:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <HAL_RCC_ClockConfig+0x1d0>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff f98a 	bl	80013d0 <HAL_InitTick>

  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40022000 	.word	0x40022000
 80020cc:	40021000 	.word	0x40021000
 80020d0:	080029f4 	.word	0x080029f4
 80020d4:	20000020 	.word	0x20000020
 80020d8:	20000024 	.word	0x20000024

080020dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	b087      	sub	sp, #28
 80020e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	2300      	movs	r3, #0
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]
 80020ee:	2300      	movs	r3, #0
 80020f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020f6:	4b1e      	ldr	r3, [pc, #120]	; (8002170 <HAL_RCC_GetSysClockFreq+0x94>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f003 030c 	and.w	r3, r3, #12
 8002102:	2b04      	cmp	r3, #4
 8002104:	d002      	beq.n	800210c <HAL_RCC_GetSysClockFreq+0x30>
 8002106:	2b08      	cmp	r3, #8
 8002108:	d003      	beq.n	8002112 <HAL_RCC_GetSysClockFreq+0x36>
 800210a:	e027      	b.n	800215c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800210c:	4b19      	ldr	r3, [pc, #100]	; (8002174 <HAL_RCC_GetSysClockFreq+0x98>)
 800210e:	613b      	str	r3, [r7, #16]
      break;
 8002110:	e027      	b.n	8002162 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	0c9b      	lsrs	r3, r3, #18
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	4a17      	ldr	r2, [pc, #92]	; (8002178 <HAL_RCC_GetSysClockFreq+0x9c>)
 800211c:	5cd3      	ldrb	r3, [r2, r3]
 800211e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d010      	beq.n	800214c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800212a:	4b11      	ldr	r3, [pc, #68]	; (8002170 <HAL_RCC_GetSysClockFreq+0x94>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	0c5b      	lsrs	r3, r3, #17
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	4a11      	ldr	r2, [pc, #68]	; (800217c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002136:	5cd3      	ldrb	r3, [r2, r3]
 8002138:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a0d      	ldr	r2, [pc, #52]	; (8002174 <HAL_RCC_GetSysClockFreq+0x98>)
 800213e:	fb02 f203 	mul.w	r2, r2, r3
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	fbb2 f3f3 	udiv	r3, r2, r3
 8002148:	617b      	str	r3, [r7, #20]
 800214a:	e004      	b.n	8002156 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a0c      	ldr	r2, [pc, #48]	; (8002180 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002150:	fb02 f303 	mul.w	r3, r2, r3
 8002154:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	613b      	str	r3, [r7, #16]
      break;
 800215a:	e002      	b.n	8002162 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800215c:	4b05      	ldr	r3, [pc, #20]	; (8002174 <HAL_RCC_GetSysClockFreq+0x98>)
 800215e:	613b      	str	r3, [r7, #16]
      break;
 8002160:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002162:	693b      	ldr	r3, [r7, #16]
}
 8002164:	4618      	mov	r0, r3
 8002166:	371c      	adds	r7, #28
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	40021000 	.word	0x40021000
 8002174:	007a1200 	.word	0x007a1200
 8002178:	08002a04 	.word	0x08002a04
 800217c:	08002a14 	.word	0x08002a14
 8002180:	003d0900 	.word	0x003d0900

08002184 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800218c:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <RCC_Delay+0x34>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <RCC_Delay+0x38>)
 8002192:	fba2 2303 	umull	r2, r3, r2, r3
 8002196:	0a5b      	lsrs	r3, r3, #9
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	fb02 f303 	mul.w	r3, r2, r3
 800219e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021a0:	bf00      	nop
  }
  while (Delay --);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	1e5a      	subs	r2, r3, #1
 80021a6:	60fa      	str	r2, [r7, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1f9      	bne.n	80021a0 <RCC_Delay+0x1c>
}
 80021ac:	bf00      	nop
 80021ae:	bf00      	nop
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr
 80021b8:	20000020 	.word	0x20000020
 80021bc:	10624dd3 	.word	0x10624dd3

080021c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e041      	b.n	8002256 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d106      	bne.n	80021ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff f85a 	bl	80012a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2202      	movs	r2, #2
 80021f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3304      	adds	r3, #4
 80021fc:	4619      	mov	r1, r3
 80021fe:	4610      	mov	r0, r2
 8002200:	f000 fa56 	bl	80026b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b01      	cmp	r3, #1
 8002272:	d001      	beq.n	8002278 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e035      	b.n	80022e4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2202      	movs	r2, #2
 800227c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68da      	ldr	r2, [r3, #12]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0201 	orr.w	r2, r2, #1
 800228e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a16      	ldr	r2, [pc, #88]	; (80022f0 <HAL_TIM_Base_Start_IT+0x90>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d009      	beq.n	80022ae <HAL_TIM_Base_Start_IT+0x4e>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022a2:	d004      	beq.n	80022ae <HAL_TIM_Base_Start_IT+0x4e>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a12      	ldr	r2, [pc, #72]	; (80022f4 <HAL_TIM_Base_Start_IT+0x94>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d111      	bne.n	80022d2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2b06      	cmp	r3, #6
 80022be:	d010      	beq.n	80022e2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 0201 	orr.w	r2, r2, #1
 80022ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022d0:	e007      	b.n	80022e2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f042 0201 	orr.w	r2, r2, #1
 80022e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	40012c00 	.word	0x40012c00
 80022f4:	40000400 	.word	0x40000400

080022f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d020      	beq.n	800235c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d01b      	beq.n	800235c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f06f 0202 	mvn.w	r2, #2
 800232c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 f998 	bl	8002678 <HAL_TIM_IC_CaptureCallback>
 8002348:	e005      	b.n	8002356 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f98b 	bl	8002666 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 f99a 	bl	800268a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	f003 0304 	and.w	r3, r3, #4
 8002362:	2b00      	cmp	r3, #0
 8002364:	d020      	beq.n	80023a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	2b00      	cmp	r3, #0
 800236e:	d01b      	beq.n	80023a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f06f 0204 	mvn.w	r2, #4
 8002378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2202      	movs	r2, #2
 800237e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f972 	bl	8002678 <HAL_TIM_IC_CaptureCallback>
 8002394:	e005      	b.n	80023a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f965 	bl	8002666 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 f974 	bl	800268a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d020      	beq.n	80023f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f003 0308 	and.w	r3, r3, #8
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d01b      	beq.n	80023f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f06f 0208 	mvn.w	r2, #8
 80023c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2204      	movs	r2, #4
 80023ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f94c 	bl	8002678 <HAL_TIM_IC_CaptureCallback>
 80023e0:	e005      	b.n	80023ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f93f 	bl	8002666 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f94e 	bl	800268a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	f003 0310 	and.w	r3, r3, #16
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d020      	beq.n	8002440 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f003 0310 	and.w	r3, r3, #16
 8002404:	2b00      	cmp	r3, #0
 8002406:	d01b      	beq.n	8002440 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f06f 0210 	mvn.w	r2, #16
 8002410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2208      	movs	r2, #8
 8002416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f926 	bl	8002678 <HAL_TIM_IC_CaptureCallback>
 800242c:	e005      	b.n	800243a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f919 	bl	8002666 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f928 	bl	800268a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00c      	beq.n	8002464 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b00      	cmp	r3, #0
 8002452:	d007      	beq.n	8002464 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f06f 0201 	mvn.w	r2, #1
 800245c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7fe fd4e 	bl	8000f00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00c      	beq.n	8002488 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002474:	2b00      	cmp	r3, #0
 8002476:	d007      	beq.n	8002488 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 fa6f 	bl	8002966 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00c      	beq.n	80024ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002498:	2b00      	cmp	r3, #0
 800249a:	d007      	beq.n	80024ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f8f8 	bl	800269c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	f003 0320 	and.w	r3, r3, #32
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00c      	beq.n	80024d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f003 0320 	and.w	r3, r3, #32
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d007      	beq.n	80024d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f06f 0220 	mvn.w	r2, #32
 80024c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 fa42 	bl	8002954 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024d0:	bf00      	nop
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024e2:	2300      	movs	r3, #0
 80024e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d101      	bne.n	80024f4 <HAL_TIM_ConfigClockSource+0x1c>
 80024f0:	2302      	movs	r3, #2
 80024f2:	e0b4      	b.n	800265e <HAL_TIM_ConfigClockSource+0x186>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2202      	movs	r2, #2
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002512:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800251a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800252c:	d03e      	beq.n	80025ac <HAL_TIM_ConfigClockSource+0xd4>
 800252e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002532:	f200 8087 	bhi.w	8002644 <HAL_TIM_ConfigClockSource+0x16c>
 8002536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800253a:	f000 8086 	beq.w	800264a <HAL_TIM_ConfigClockSource+0x172>
 800253e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002542:	d87f      	bhi.n	8002644 <HAL_TIM_ConfigClockSource+0x16c>
 8002544:	2b70      	cmp	r3, #112	; 0x70
 8002546:	d01a      	beq.n	800257e <HAL_TIM_ConfigClockSource+0xa6>
 8002548:	2b70      	cmp	r3, #112	; 0x70
 800254a:	d87b      	bhi.n	8002644 <HAL_TIM_ConfigClockSource+0x16c>
 800254c:	2b60      	cmp	r3, #96	; 0x60
 800254e:	d050      	beq.n	80025f2 <HAL_TIM_ConfigClockSource+0x11a>
 8002550:	2b60      	cmp	r3, #96	; 0x60
 8002552:	d877      	bhi.n	8002644 <HAL_TIM_ConfigClockSource+0x16c>
 8002554:	2b50      	cmp	r3, #80	; 0x50
 8002556:	d03c      	beq.n	80025d2 <HAL_TIM_ConfigClockSource+0xfa>
 8002558:	2b50      	cmp	r3, #80	; 0x50
 800255a:	d873      	bhi.n	8002644 <HAL_TIM_ConfigClockSource+0x16c>
 800255c:	2b40      	cmp	r3, #64	; 0x40
 800255e:	d058      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0x13a>
 8002560:	2b40      	cmp	r3, #64	; 0x40
 8002562:	d86f      	bhi.n	8002644 <HAL_TIM_ConfigClockSource+0x16c>
 8002564:	2b30      	cmp	r3, #48	; 0x30
 8002566:	d064      	beq.n	8002632 <HAL_TIM_ConfigClockSource+0x15a>
 8002568:	2b30      	cmp	r3, #48	; 0x30
 800256a:	d86b      	bhi.n	8002644 <HAL_TIM_ConfigClockSource+0x16c>
 800256c:	2b20      	cmp	r3, #32
 800256e:	d060      	beq.n	8002632 <HAL_TIM_ConfigClockSource+0x15a>
 8002570:	2b20      	cmp	r3, #32
 8002572:	d867      	bhi.n	8002644 <HAL_TIM_ConfigClockSource+0x16c>
 8002574:	2b00      	cmp	r3, #0
 8002576:	d05c      	beq.n	8002632 <HAL_TIM_ConfigClockSource+0x15a>
 8002578:	2b10      	cmp	r3, #16
 800257a:	d05a      	beq.n	8002632 <HAL_TIM_ConfigClockSource+0x15a>
 800257c:	e062      	b.n	8002644 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6818      	ldr	r0, [r3, #0]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	6899      	ldr	r1, [r3, #8]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	f000 f96a 	bl	8002866 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	609a      	str	r2, [r3, #8]
      break;
 80025aa:	e04f      	b.n	800264c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6818      	ldr	r0, [r3, #0]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	6899      	ldr	r1, [r3, #8]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	f000 f953 	bl	8002866 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025ce:	609a      	str	r2, [r3, #8]
      break;
 80025d0:	e03c      	b.n	800264c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	6859      	ldr	r1, [r3, #4]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	461a      	mov	r2, r3
 80025e0:	f000 f8ca 	bl	8002778 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2150      	movs	r1, #80	; 0x50
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 f921 	bl	8002832 <TIM_ITRx_SetConfig>
      break;
 80025f0:	e02c      	b.n	800264c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	6859      	ldr	r1, [r3, #4]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	461a      	mov	r2, r3
 8002600:	f000 f8e8 	bl	80027d4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2160      	movs	r1, #96	; 0x60
 800260a:	4618      	mov	r0, r3
 800260c:	f000 f911 	bl	8002832 <TIM_ITRx_SetConfig>
      break;
 8002610:	e01c      	b.n	800264c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6818      	ldr	r0, [r3, #0]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	6859      	ldr	r1, [r3, #4]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	461a      	mov	r2, r3
 8002620:	f000 f8aa 	bl	8002778 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2140      	movs	r1, #64	; 0x40
 800262a:	4618      	mov	r0, r3
 800262c:	f000 f901 	bl	8002832 <TIM_ITRx_SetConfig>
      break;
 8002630:	e00c      	b.n	800264c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4619      	mov	r1, r3
 800263c:	4610      	mov	r0, r2
 800263e:	f000 f8f8 	bl	8002832 <TIM_ITRx_SetConfig>
      break;
 8002642:	e003      	b.n	800264c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	73fb      	strb	r3, [r7, #15]
      break;
 8002648:	e000      	b.n	800264c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800264a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800265c:	7bfb      	ldrb	r3, [r7, #15]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr

08002678 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr

0800268a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr

0800269c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr
	...

080026b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a2b      	ldr	r2, [pc, #172]	; (8002770 <TIM_Base_SetConfig+0xc0>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d007      	beq.n	80026d8 <TIM_Base_SetConfig+0x28>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ce:	d003      	beq.n	80026d8 <TIM_Base_SetConfig+0x28>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a28      	ldr	r2, [pc, #160]	; (8002774 <TIM_Base_SetConfig+0xc4>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d108      	bne.n	80026ea <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a20      	ldr	r2, [pc, #128]	; (8002770 <TIM_Base_SetConfig+0xc0>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d007      	beq.n	8002702 <TIM_Base_SetConfig+0x52>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026f8:	d003      	beq.n	8002702 <TIM_Base_SetConfig+0x52>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a1d      	ldr	r2, [pc, #116]	; (8002774 <TIM_Base_SetConfig+0xc4>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d108      	bne.n	8002714 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002708:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	4313      	orrs	r3, r2
 8002712:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	4313      	orrs	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a0d      	ldr	r2, [pc, #52]	; (8002770 <TIM_Base_SetConfig+0xc0>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d103      	bne.n	8002748 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d005      	beq.n	8002766 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	f023 0201 	bic.w	r2, r3, #1
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	611a      	str	r2, [r3, #16]
  }
}
 8002766:	bf00      	nop
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr
 8002770:	40012c00 	.word	0x40012c00
 8002774:	40000400 	.word	0x40000400

08002778 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002778:	b480      	push	{r7}
 800277a:	b087      	sub	sp, #28
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	f023 0201 	bic.w	r2, r3, #1
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	011b      	lsls	r3, r3, #4
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f023 030a 	bic.w	r3, r3, #10
 80027b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	621a      	str	r2, [r3, #32]
}
 80027ca:	bf00      	nop
 80027cc:	371c      	adds	r7, #28
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr

080027d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b087      	sub	sp, #28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	f023 0210 	bic.w	r2, r3, #16
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	031b      	lsls	r3, r3, #12
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	4313      	orrs	r3, r2
 8002808:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002810:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	011b      	lsls	r3, r3, #4
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	4313      	orrs	r3, r2
 800281a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	621a      	str	r2, [r3, #32]
}
 8002828:	bf00      	nop
 800282a:	371c      	adds	r7, #28
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr

08002832 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002832:	b480      	push	{r7}
 8002834:	b085      	sub	sp, #20
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
 800283a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002848:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4313      	orrs	r3, r2
 8002850:	f043 0307 	orr.w	r3, r3, #7
 8002854:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	609a      	str	r2, [r3, #8]
}
 800285c:	bf00      	nop
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr

08002866 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002866:	b480      	push	{r7}
 8002868:	b087      	sub	sp, #28
 800286a:	af00      	add	r7, sp, #0
 800286c:	60f8      	str	r0, [r7, #12]
 800286e:	60b9      	str	r1, [r7, #8]
 8002870:	607a      	str	r2, [r7, #4]
 8002872:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002880:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	021a      	lsls	r2, r3, #8
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	431a      	orrs	r2, r3
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	4313      	orrs	r3, r2
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	4313      	orrs	r3, r2
 8002892:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	609a      	str	r2, [r3, #8]
}
 800289a:	bf00      	nop
 800289c:	371c      	adds	r7, #28
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr

080028a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d101      	bne.n	80028bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028b8:	2302      	movs	r3, #2
 80028ba:	e041      	b.n	8002940 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2202      	movs	r2, #2
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a14      	ldr	r2, [pc, #80]	; (800294c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d009      	beq.n	8002914 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002908:	d004      	beq.n	8002914 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a10      	ldr	r2, [pc, #64]	; (8002950 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d10c      	bne.n	800292e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800291a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	68ba      	ldr	r2, [r7, #8]
 8002922:	4313      	orrs	r3, r2
 8002924:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	40012c00 	.word	0x40012c00
 8002950:	40000400 	.word	0x40000400

08002954 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr

08002966 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr

08002978 <__libc_init_array>:
 8002978:	b570      	push	{r4, r5, r6, lr}
 800297a:	2600      	movs	r6, #0
 800297c:	4d0c      	ldr	r5, [pc, #48]	; (80029b0 <__libc_init_array+0x38>)
 800297e:	4c0d      	ldr	r4, [pc, #52]	; (80029b4 <__libc_init_array+0x3c>)
 8002980:	1b64      	subs	r4, r4, r5
 8002982:	10a4      	asrs	r4, r4, #2
 8002984:	42a6      	cmp	r6, r4
 8002986:	d109      	bne.n	800299c <__libc_init_array+0x24>
 8002988:	f000 f822 	bl	80029d0 <_init>
 800298c:	2600      	movs	r6, #0
 800298e:	4d0a      	ldr	r5, [pc, #40]	; (80029b8 <__libc_init_array+0x40>)
 8002990:	4c0a      	ldr	r4, [pc, #40]	; (80029bc <__libc_init_array+0x44>)
 8002992:	1b64      	subs	r4, r4, r5
 8002994:	10a4      	asrs	r4, r4, #2
 8002996:	42a6      	cmp	r6, r4
 8002998:	d105      	bne.n	80029a6 <__libc_init_array+0x2e>
 800299a:	bd70      	pop	{r4, r5, r6, pc}
 800299c:	f855 3b04 	ldr.w	r3, [r5], #4
 80029a0:	4798      	blx	r3
 80029a2:	3601      	adds	r6, #1
 80029a4:	e7ee      	b.n	8002984 <__libc_init_array+0xc>
 80029a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80029aa:	4798      	blx	r3
 80029ac:	3601      	adds	r6, #1
 80029ae:	e7f2      	b.n	8002996 <__libc_init_array+0x1e>
 80029b0:	08002a18 	.word	0x08002a18
 80029b4:	08002a18 	.word	0x08002a18
 80029b8:	08002a18 	.word	0x08002a18
 80029bc:	08002a1c 	.word	0x08002a1c

080029c0 <memset>:
 80029c0:	4603      	mov	r3, r0
 80029c2:	4402      	add	r2, r0
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d100      	bne.n	80029ca <memset+0xa>
 80029c8:	4770      	bx	lr
 80029ca:	f803 1b01 	strb.w	r1, [r3], #1
 80029ce:	e7f9      	b.n	80029c4 <memset+0x4>

080029d0 <_init>:
 80029d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029d2:	bf00      	nop
 80029d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029d6:	bc08      	pop	{r3}
 80029d8:	469e      	mov	lr, r3
 80029da:	4770      	bx	lr

080029dc <_fini>:
 80029dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029de:	bf00      	nop
 80029e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029e2:	bc08      	pop	{r3}
 80029e4:	469e      	mov	lr, r3
 80029e6:	4770      	bx	lr
